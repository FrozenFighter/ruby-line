#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'

module ApplicationType
  IOS = 16
  IOS_RC = 17
  IOS_BETA = 18
  IOS_ALPHA = 19
  ANDROID = 32
  ANDROID_RC = 33
  ANDROID_BETA = 34
  ANDROID_ALPHA = 35
  WAP = 48
  WAP_RC = 49
  WAP_BETA = 50
  WAP_ALPHA = 51
  BOT = 64
  BOT_RC = 65
  BOT_BETA = 66
  BOT_ALPHA = 67
  WEB = 80
  WEB_RC = 81
  WEB_BETA = 82
  WEB_ALPHA = 83
  DESKTOPWIN = 96
  DESKTOPWIN_RC = 97
  DESKTOPWIN_BETA = 98
  DESKTOPWIN_ALPHA = 99
  DESKTOPMAC = 112
  DESKTOPMAC_RC = 113
  DESKTOPMAC_BETA = 114
  DESKTOPMAC_ALPHA = 115
  CHANNELGW = 128
  CHANNELGW_RC = 129
  CHANNELGW_BETA = 130
  CHANNELGW_ALPHA = 131
  CHANNELCP = 144
  CHANNELCP_RC = 145
  CHANNELCP_BETA = 146
  CHANNELCP_ALPHA = 147
  WINPHONE = 160
  WINPHONE_RC = 161
  WINPHONE_BETA = 162
  WINPHONE_ALPHA = 163
  BLACKBERRY = 176
  BLACKBERRY_RC = 177
  BLACKBERRY_BETA = 178
  BLACKBERRY_ALPHA = 179
  WINMETRO = 192
  WINMETRO_RC = 193
  WINMETRO_BETA = 194
  WINMETRO_ALPHA = 195
  S40 = 208
  S40_RC = 209
  S40_BETA = 210
  S40_ALPHA = 211
  CHRONO = 224
  CHRONO_RC = 225
  CHRONO_BETA = 226
  CHRONO_ALPHA = 227
  TIZEN = 256
  TIZEN_RC = 257
  TIZEN_BETA = 258
  TIZEN_ALPHA = 259
  VIRTUAL = 272
  VALUE_MAP = {16 => "IOS", 17 => "IOS_RC", 18 => "IOS_BETA", 19 => "IOS_ALPHA", 32 => "ANDROID", 33 => "ANDROID_RC", 34 => "ANDROID_BETA", 35 => "ANDROID_ALPHA", 48 => "WAP", 49 => "WAP_RC", 50 => "WAP_BETA", 51 => "WAP_ALPHA", 64 => "BOT", 65 => "BOT_RC", 66 => "BOT_BETA", 67 => "BOT_ALPHA", 80 => "WEB", 81 => "WEB_RC", 82 => "WEB_BETA", 83 => "WEB_ALPHA", 96 => "DESKTOPWIN", 97 => "DESKTOPWIN_RC", 98 => "DESKTOPWIN_BETA", 99 => "DESKTOPWIN_ALPHA", 112 => "DESKTOPMAC", 113 => "DESKTOPMAC_RC", 114 => "DESKTOPMAC_BETA", 115 => "DESKTOPMAC_ALPHA", 128 => "CHANNELGW", 129 => "CHANNELGW_RC", 130 => "CHANNELGW_BETA", 131 => "CHANNELGW_ALPHA", 144 => "CHANNELCP", 145 => "CHANNELCP_RC", 146 => "CHANNELCP_BETA", 147 => "CHANNELCP_ALPHA", 160 => "WINPHONE", 161 => "WINPHONE_RC", 162 => "WINPHONE_BETA", 163 => "WINPHONE_ALPHA", 176 => "BLACKBERRY", 177 => "BLACKBERRY_RC", 178 => "BLACKBERRY_BETA", 179 => "BLACKBERRY_ALPHA", 192 => "WINMETRO", 193 => "WINMETRO_RC", 194 => "WINMETRO_BETA", 195 => "WINMETRO_ALPHA", 208 => "S40", 209 => "S40_RC", 210 => "S40_BETA", 211 => "S40_ALPHA", 224 => "CHRONO", 225 => "CHRONO_RC", 226 => "CHRONO_BETA", 227 => "CHRONO_ALPHA", 256 => "TIZEN", 257 => "TIZEN_RC", 258 => "TIZEN_BETA", 259 => "TIZEN_ALPHA", 272 => "VIRTUAL"}
  VALID_VALUES = Set.new([IOS, IOS_RC, IOS_BETA, IOS_ALPHA, ANDROID, ANDROID_RC, ANDROID_BETA, ANDROID_ALPHA, WAP, WAP_RC, WAP_BETA, WAP_ALPHA, BOT, BOT_RC, BOT_BETA, BOT_ALPHA, WEB, WEB_RC, WEB_BETA, WEB_ALPHA, DESKTOPWIN, DESKTOPWIN_RC, DESKTOPWIN_BETA, DESKTOPWIN_ALPHA, DESKTOPMAC, DESKTOPMAC_RC, DESKTOPMAC_BETA, DESKTOPMAC_ALPHA, CHANNELGW, CHANNELGW_RC, CHANNELGW_BETA, CHANNELGW_ALPHA, CHANNELCP, CHANNELCP_RC, CHANNELCP_BETA, CHANNELCP_ALPHA, WINPHONE, WINPHONE_RC, WINPHONE_BETA, WINPHONE_ALPHA, BLACKBERRY, BLACKBERRY_RC, BLACKBERRY_BETA, BLACKBERRY_ALPHA, WINMETRO, WINMETRO_RC, WINMETRO_BETA, WINMETRO_ALPHA, S40, S40_RC, S40_BETA, S40_ALPHA, CHRONO, CHRONO_RC, CHRONO_BETA, CHRONO_ALPHA, TIZEN, TIZEN_RC, TIZEN_BETA, TIZEN_ALPHA, VIRTUAL]).freeze
end

module BuddyBannerLinkType
  BUDDY_BANNER_LINK_HIDDEN = 0
  BUDDY_BANNER_LINK_MID = 1
  BUDDY_BANNER_LINK_URL = 2
  VALUE_MAP = {0 => "BUDDY_BANNER_LINK_HIDDEN", 1 => "BUDDY_BANNER_LINK_MID", 2 => "BUDDY_BANNER_LINK_URL"}
  VALID_VALUES = Set.new([BUDDY_BANNER_LINK_HIDDEN, BUDDY_BANNER_LINK_MID, BUDDY_BANNER_LINK_URL]).freeze
end

module BuddyOnAirType
  NORMAL = 0
  LIVE = 1
  VOIP = 2
  VALUE_MAP = {0 => "NORMAL", 1 => "LIVE", 2 => "VOIP"}
  VALID_VALUES = Set.new([NORMAL, LIVE, VOIP]).freeze
end

module BuddyResultState
  ACCEPTED = 1
  SUCCEEDED = 2
  FAILED = 3
  CANCELLED = 4
  NOTIFY_FAILED = 5
  STORING = 11
  UPLOADING = 21
  NOTIFYING = 31
  VALUE_MAP = {1 => "ACCEPTED", 2 => "SUCCEEDED", 3 => "FAILED", 4 => "CANCELLED", 5 => "NOTIFY_FAILED", 11 => "STORING", 21 => "UPLOADING", 31 => "NOTIFYING"}
  VALID_VALUES = Set.new([ACCEPTED, SUCCEEDED, FAILED, CANCELLED, NOTIFY_FAILED, STORING, UPLOADING, NOTIFYING]).freeze
end

module BuddySearchRequestSource
  NA = 0
  FRIEND_VIEW = 1
  OFFICIAL_ACCOUNT_VIEW = 2
  VALUE_MAP = {0 => "NA", 1 => "FRIEND_VIEW", 2 => "OFFICIAL_ACCOUNT_VIEW"}
  VALID_VALUES = Set.new([NA, FRIEND_VIEW, OFFICIAL_ACCOUNT_VIEW]).freeze
end

module CarrierCode
  NOT_SPECIFIED = 0
  JP_DOCOMO = 1
  JP_AU = 2
  JP_SOFTBANK = 3
  KR_SKT = 17
  KR_KT = 18
  KR_LGT = 19
  VALUE_MAP = {0 => "NOT_SPECIFIED", 1 => "JP_DOCOMO", 2 => "JP_AU", 3 => "JP_SOFTBANK", 17 => "KR_SKT", 18 => "KR_KT", 19 => "KR_LGT"}
  VALID_VALUES = Set.new([NOT_SPECIFIED, JP_DOCOMO, JP_AU, JP_SOFTBANK, KR_SKT, KR_KT, KR_LGT]).freeze
end

module ChannelConfiguration
  MESSAGE = 0
  MESSAGE_NOTIFICATION = 1
  NOTIFICATION_CENTER = 2
  VALUE_MAP = {0 => "MESSAGE", 1 => "MESSAGE_NOTIFICATION", 2 => "NOTIFICATION_CENTER"}
  VALID_VALUES = Set.new([MESSAGE, MESSAGE_NOTIFICATION, NOTIFICATION_CENTER]).freeze
end

module ChannelErrorCode
  ILLEGAL_ARGUMENT = 0
  INTERNAL_ERROR = 1
  CONNECTION_ERROR = 2
  AUTHENTICATIONI_FAILED = 3
  NEED_PERMISSION_APPROVAL = 4
  COIN_NOT_USABLE = 5
  VALUE_MAP = {0 => "ILLEGAL_ARGUMENT", 1 => "INTERNAL_ERROR", 2 => "CONNECTION_ERROR", 3 => "AUTHENTICATIONI_FAILED", 4 => "NEED_PERMISSION_APPROVAL", 5 => "COIN_NOT_USABLE"}
  VALID_VALUES = Set.new([ILLEGAL_ARGUMENT, INTERNAL_ERROR, CONNECTION_ERROR, AUTHENTICATIONI_FAILED, NEED_PERMISSION_APPROVAL, COIN_NOT_USABLE]).freeze
end

module ChannelSyncType
  SYNC = 0
  REMOVE = 1
  VALUE_MAP = {0 => "SYNC", 1 => "REMOVE"}
  VALID_VALUES = Set.new([SYNC, REMOVE]).freeze
end

module ContactAttribute
  CONTACT_ATTRIBUTE_CAPABLE_VOICE_CALL = 1
  CONTACT_ATTRIBUTE_CAPABLE_VIDEO_CALL = 2
  CONTACT_ATTRIBUTE_CAPABLE_MY_HOME = 16
  CONTACT_ATTRIBUTE_CAPABLE_BUDDY = 32
  VALUE_MAP = {1 => "CONTACT_ATTRIBUTE_CAPABLE_VOICE_CALL", 2 => "CONTACT_ATTRIBUTE_CAPABLE_VIDEO_CALL", 16 => "CONTACT_ATTRIBUTE_CAPABLE_MY_HOME", 32 => "CONTACT_ATTRIBUTE_CAPABLE_BUDDY"}
  VALID_VALUES = Set.new([CONTACT_ATTRIBUTE_CAPABLE_VOICE_CALL, CONTACT_ATTRIBUTE_CAPABLE_VIDEO_CALL, CONTACT_ATTRIBUTE_CAPABLE_MY_HOME, CONTACT_ATTRIBUTE_CAPABLE_BUDDY]).freeze
end

module ContactCategory
  NORMAL = 0
  RECOMMEND = 1
  VALUE_MAP = {0 => "NORMAL", 1 => "RECOMMEND"}
  VALID_VALUES = Set.new([NORMAL, RECOMMEND]).freeze
end

module ContactRelation
  ONEWAY = 0
  BOTH = 1
  NOT_REGISTERED = 2
  VALUE_MAP = {0 => "ONEWAY", 1 => "BOTH", 2 => "NOT_REGISTERED"}
  VALID_VALUES = Set.new([ONEWAY, BOTH, NOT_REGISTERED]).freeze
end

module ContactSetting
  CONTACT_SETTING_NOTIFICATION_DISABLE = 1
  CONTACT_SETTING_DISPLAY_NAME_OVERRIDE = 2
  CONTACT_SETTING_CONTACT_HIDE = 4
  CONTACT_SETTING_FAVORITE = 8
  CONTACT_SETTING_DELETE = 16
  VALUE_MAP = {1 => "CONTACT_SETTING_NOTIFICATION_DISABLE", 2 => "CONTACT_SETTING_DISPLAY_NAME_OVERRIDE", 4 => "CONTACT_SETTING_CONTACT_HIDE", 8 => "CONTACT_SETTING_FAVORITE", 16 => "CONTACT_SETTING_DELETE"}
  VALID_VALUES = Set.new([CONTACT_SETTING_NOTIFICATION_DISABLE, CONTACT_SETTING_DISPLAY_NAME_OVERRIDE, CONTACT_SETTING_CONTACT_HIDE, CONTACT_SETTING_FAVORITE, CONTACT_SETTING_DELETE]).freeze
end

module ContactStatus
  UNSPECIFIED = 0
  FRIEND = 1
  FRIEND_BLOCKED = 2
  RECOMMEND = 3
  RECOMMEND_BLOCKED = 4
  DELETED = 5
  DELETED_BLOCKED = 6
  VALUE_MAP = {0 => "UNSPECIFIED", 1 => "FRIEND", 2 => "FRIEND_BLOCKED", 3 => "RECOMMEND", 4 => "RECOMMEND_BLOCKED", 5 => "DELETED", 6 => "DELETED_BLOCKED"}
  VALID_VALUES = Set.new([UNSPECIFIED, FRIEND, FRIEND_BLOCKED, RECOMMEND, RECOMMEND_BLOCKED, DELETED, DELETED_BLOCKED]).freeze
end

module ContactType
  MID = 0
  PHONE = 1
  EMAIL = 2
  USERID = 3
  PROXIMITY = 4
  GROUP = 5
  USER = 6
  QRCODE = 7
  PROMOTION_BOT = 8
  REPAIR = 128
  FACEBOOK = 2305
  SINA = 2306
  RENREN = 2307
  FEIXIN = 2308
  VALUE_MAP = {0 => "MID", 1 => "PHONE", 2 => "EMAIL", 3 => "USERID", 4 => "PROXIMITY", 5 => "GROUP", 6 => "USER", 7 => "QRCODE", 8 => "PROMOTION_BOT", 128 => "REPAIR", 2305 => "FACEBOOK", 2306 => "SINA", 2307 => "RENREN", 2308 => "FEIXIN"}
  VALID_VALUES = Set.new([MID, PHONE, EMAIL, USERID, PROXIMITY, GROUP, USER, QRCODE, PROMOTION_BOT, REPAIR, FACEBOOK, SINA, RENREN, FEIXIN]).freeze
end

module ContentType
  NONE = 0
  IMAGE = 1
  VIDEO = 2
  AUDIO = 3
  HTML = 4
  PDF = 5
  CALL = 6
  STICKER = 7
  PRESENCE = 8
  GIFT = 9
  GROUPBOARD = 10
  APPLINK = 11
  LINK = 12
  CONTACT = 13
  FILE = 14
  LOCATION = 15
  POSTNOTIFICATION = 16
  RICH = 17
  CHATEVENT = 18
  VALUE_MAP = {0 => "NONE", 1 => "IMAGE", 2 => "VIDEO", 3 => "AUDIO", 4 => "HTML", 5 => "PDF", 6 => "CALL", 7 => "STICKER", 8 => "PRESENCE", 9 => "GIFT", 10 => "GROUPBOARD", 11 => "APPLINK", 12 => "LINK", 13 => "CONTACT", 14 => "FILE", 15 => "LOCATION", 16 => "POSTNOTIFICATION", 17 => "RICH", 18 => "CHATEVENT"}
  VALID_VALUES = Set.new([NONE, IMAGE, VIDEO, AUDIO, HTML, PDF, CALL, STICKER, PRESENCE, GIFT, GROUPBOARD, APPLINK, LINK, CONTACT, FILE, LOCATION, POSTNOTIFICATION, RICH, CHATEVENT]).freeze
end

module CustomMode
  PROMOTION_FRIENDS_INVITE = 1
  CAPABILITY_SERVER_SIDE_SMS = 2
  LINE_CLIENT_ANALYTICS_CONFIGURATION = 3
  VALUE_MAP = {1 => "PROMOTION_FRIENDS_INVITE", 2 => "CAPABILITY_SERVER_SIDE_SMS", 3 => "LINE_CLIENT_ANALYTICS_CONFIGURATION"}
  VALID_VALUES = Set.new([PROMOTION_FRIENDS_INVITE, CAPABILITY_SERVER_SIDE_SMS, LINE_CLIENT_ANALYTICS_CONFIGURATION]).freeze
end

module EmailConfirmationStatus
  NOT_SPECIFIED = 0
  NOT_YET = 1
  DONE = 3
  VALUE_MAP = {0 => "NOT_SPECIFIED", 1 => "NOT_YET", 3 => "DONE"}
  VALID_VALUES = Set.new([NOT_SPECIFIED, NOT_YET, DONE]).freeze
end

module EmailConfirmationType
  SERVER_SIDE_EMAIL = 0
  CLIENT_SIDE_EMAIL = 1
  VALUE_MAP = {0 => "SERVER_SIDE_EMAIL", 1 => "CLIENT_SIDE_EMAIL"}
  VALID_VALUES = Set.new([SERVER_SIDE_EMAIL, CLIENT_SIDE_EMAIL]).freeze
end

module ErrorCode
  ILLEGAL_ARGUMENT = 0
  AUTHENTICATION_FAILED = 1
  DB_FAILED = 2
  INVALID_STATE = 3
  EXCESSIVE_ACCESS = 4
  NOT_FOUND = 5
  INVALID_LENGTH = 6
  NOT_AVAILABLE_USER = 7
  NOT_AUTHORIZED_DEVICE = 8
  INVALID_MID = 9
  NOT_A_MEMBER = 10
  INCOMPATIBLE_APP_VERSION = 11
  NOT_READY = 12
  NOT_AVAILABLE_SESSION = 13
  NOT_AUTHORIZED_SESSION = 14
  SYSTEM_ERROR = 15
  NO_AVAILABLE_VERIFICATION_METHOD = 16
  NOT_AUTHENTICATED = 17
  INVALID_IDENTITY_CREDENTIAL = 18
  NOT_AVAILABLE_IDENTITY_IDENTIFIER = 19
  INTERNAL_ERROR = 20
  NO_SUCH_IDENTITY_IDENFIER = 21
  DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY = 22
  ILLEGAL_IDENTITY_CREDENTIAL = 23
  UNKNOWN_CHANNEL = 24
  NO_SUCH_MESSAGE_BOX = 25
  NOT_AVAILABLE_MESSAGE_BOX = 26
  CHANNEL_DOES_NOT_MATCH = 27
  NOT_YOUR_MESSAGE = 28
  MESSAGE_DEFINED_ERROR = 29
  USER_CANNOT_ACCEPT_PRESENTS = 30
  USER_NOT_STICKER_OWNER = 32
  MAINTENANCE_ERROR = 33
  ACCOUNT_NOT_MATCHED = 34
  ABUSE_BLOCK = 35
  NOT_FRIEND = 36
  NOT_ALLOWED_CALL = 37
  BLOCK_FRIEND = 38
  INCOMPATIBLE_VOIP_VERSION = 39
  INVALID_SNS_ACCESS_TOKEN = 40
  EXTERNAL_SERVICE_NOT_AVAILABLE = 41
  NOT_ALLOWED_ADD_CONTACT = 42
  NOT_CERTIFICATED = 43
  NOT_ALLOWED_SECONDARY_DEVICE = 44
  INVALID_PIN_CODE = 45
  NOT_FOUND_IDENTITY_CREDENTIAL = 46
  EXCEED_FILE_MAX_SIZE = 47
  EXCEED_DAILY_QUOTA = 48
  NOT_SUPPORT_SEND_FILE = 49
  MUST_UPGRADE = 50
  NOT_AVAILABLE_PIN_CODE_SESSION = 51
  VALUE_MAP = {0 => "ILLEGAL_ARGUMENT", 1 => "AUTHENTICATION_FAILED", 2 => "DB_FAILED", 3 => "INVALID_STATE", 4 => "EXCESSIVE_ACCESS", 5 => "NOT_FOUND", 6 => "INVALID_LENGTH", 7 => "NOT_AVAILABLE_USER", 8 => "NOT_AUTHORIZED_DEVICE", 9 => "INVALID_MID", 10 => "NOT_A_MEMBER", 11 => "INCOMPATIBLE_APP_VERSION", 12 => "NOT_READY", 13 => "NOT_AVAILABLE_SESSION", 14 => "NOT_AUTHORIZED_SESSION", 15 => "SYSTEM_ERROR", 16 => "NO_AVAILABLE_VERIFICATION_METHOD", 17 => "NOT_AUTHENTICATED", 18 => "INVALID_IDENTITY_CREDENTIAL", 19 => "NOT_AVAILABLE_IDENTITY_IDENTIFIER", 20 => "INTERNAL_ERROR", 21 => "NO_SUCH_IDENTITY_IDENFIER", 22 => "DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY", 23 => "ILLEGAL_IDENTITY_CREDENTIAL", 24 => "UNKNOWN_CHANNEL", 25 => "NO_SUCH_MESSAGE_BOX", 26 => "NOT_AVAILABLE_MESSAGE_BOX", 27 => "CHANNEL_DOES_NOT_MATCH", 28 => "NOT_YOUR_MESSAGE", 29 => "MESSAGE_DEFINED_ERROR", 30 => "USER_CANNOT_ACCEPT_PRESENTS", 32 => "USER_NOT_STICKER_OWNER", 33 => "MAINTENANCE_ERROR", 34 => "ACCOUNT_NOT_MATCHED", 35 => "ABUSE_BLOCK", 36 => "NOT_FRIEND", 37 => "NOT_ALLOWED_CALL", 38 => "BLOCK_FRIEND", 39 => "INCOMPATIBLE_VOIP_VERSION", 40 => "INVALID_SNS_ACCESS_TOKEN", 41 => "EXTERNAL_SERVICE_NOT_AVAILABLE", 42 => "NOT_ALLOWED_ADD_CONTACT", 43 => "NOT_CERTIFICATED", 44 => "NOT_ALLOWED_SECONDARY_DEVICE", 45 => "INVALID_PIN_CODE", 46 => "NOT_FOUND_IDENTITY_CREDENTIAL", 47 => "EXCEED_FILE_MAX_SIZE", 48 => "EXCEED_DAILY_QUOTA", 49 => "NOT_SUPPORT_SEND_FILE", 50 => "MUST_UPGRADE", 51 => "NOT_AVAILABLE_PIN_CODE_SESSION"}
  VALID_VALUES = Set.new([ILLEGAL_ARGUMENT, AUTHENTICATION_FAILED, DB_FAILED, INVALID_STATE, EXCESSIVE_ACCESS, NOT_FOUND, INVALID_LENGTH, NOT_AVAILABLE_USER, NOT_AUTHORIZED_DEVICE, INVALID_MID, NOT_A_MEMBER, INCOMPATIBLE_APP_VERSION, NOT_READY, NOT_AVAILABLE_SESSION, NOT_AUTHORIZED_SESSION, SYSTEM_ERROR, NO_AVAILABLE_VERIFICATION_METHOD, NOT_AUTHENTICATED, INVALID_IDENTITY_CREDENTIAL, NOT_AVAILABLE_IDENTITY_IDENTIFIER, INTERNAL_ERROR, NO_SUCH_IDENTITY_IDENFIER, DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY, ILLEGAL_IDENTITY_CREDENTIAL, UNKNOWN_CHANNEL, NO_SUCH_MESSAGE_BOX, NOT_AVAILABLE_MESSAGE_BOX, CHANNEL_DOES_NOT_MATCH, NOT_YOUR_MESSAGE, MESSAGE_DEFINED_ERROR, USER_CANNOT_ACCEPT_PRESENTS, USER_NOT_STICKER_OWNER, MAINTENANCE_ERROR, ACCOUNT_NOT_MATCHED, ABUSE_BLOCK, NOT_FRIEND, NOT_ALLOWED_CALL, BLOCK_FRIEND, INCOMPATIBLE_VOIP_VERSION, INVALID_SNS_ACCESS_TOKEN, EXTERNAL_SERVICE_NOT_AVAILABLE, NOT_ALLOWED_ADD_CONTACT, NOT_CERTIFICATED, NOT_ALLOWED_SECONDARY_DEVICE, INVALID_PIN_CODE, NOT_FOUND_IDENTITY_CREDENTIAL, EXCEED_FILE_MAX_SIZE, EXCEED_DAILY_QUOTA, NOT_SUPPORT_SEND_FILE, MUST_UPGRADE, NOT_AVAILABLE_PIN_CODE_SESSION]).freeze
end

module FeatureType
  OBJECT_STORAGE = 1
  VALUE_MAP = {1 => "OBJECT_STORAGE"}
  VALID_VALUES = Set.new([OBJECT_STORAGE]).freeze
end

module GroupAttribute
  NAME = 1
  PICTURE_STATUS = 2
  ALL = 255
  VALUE_MAP = {1 => "NAME", 2 => "PICTURE_STATUS", 255 => "ALL"}
  VALID_VALUES = Set.new([NAME, PICTURE_STATUS, ALL]).freeze
end

module IdentityProvider
  UNKNOWN = 0
  LINE = 1
  NAVER_KR = 2
  VALUE_MAP = {0 => "UNKNOWN", 1 => "LINE", 2 => "NAVER_KR"}
  VALID_VALUES = Set.new([UNKNOWN, LINE, NAVER_KR]).freeze
end

module LoginResultType
  SUCCESS = 1
  REQUIRE_QRCODE = 2
  REQUIRE_DEVICE_CONFIRM = 3
  VALUE_MAP = {1 => "SUCCESS", 2 => "REQUIRE_QRCODE", 3 => "REQUIRE_DEVICE_CONFIRM"}
  VALID_VALUES = Set.new([SUCCESS, REQUIRE_QRCODE, REQUIRE_DEVICE_CONFIRM]).freeze
end

module MessageOperationType
  SEND_MESSAGE = 1
  RECEIVE_MESSAGE = 2
  READ_MESSAGE = 3
  NOTIFIED_READ_MESSAGE = 4
  NOTIFIED_JOIN_CHAT = 5
  FAILED_SEND_MESSAGE = 6
  SEND_CONTENT = 7
  SEND_CONTENT_RECEIPT = 8
  SEND_CHAT_REMOVED = 9
  REMOVE_ALL_MESSAGES = 10
  VALUE_MAP = {1 => "SEND_MESSAGE", 2 => "RECEIVE_MESSAGE", 3 => "READ_MESSAGE", 4 => "NOTIFIED_READ_MESSAGE", 5 => "NOTIFIED_JOIN_CHAT", 6 => "FAILED_SEND_MESSAGE", 7 => "SEND_CONTENT", 8 => "SEND_CONTENT_RECEIPT", 9 => "SEND_CHAT_REMOVED", 10 => "REMOVE_ALL_MESSAGES"}
  VALID_VALUES = Set.new([SEND_MESSAGE, RECEIVE_MESSAGE, READ_MESSAGE, NOTIFIED_READ_MESSAGE, NOTIFIED_JOIN_CHAT, FAILED_SEND_MESSAGE, SEND_CONTENT, SEND_CONTENT_RECEIPT, SEND_CHAT_REMOVED, REMOVE_ALL_MESSAGES]).freeze
end

module MIDType
  USER = 0
  ROOM = 1
  GROUP = 2
  VALUE_MAP = {0 => "USER", 1 => "ROOM", 2 => "GROUP"}
  VALID_VALUES = Set.new([USER, ROOM, GROUP]).freeze
end

module ModificationType
  ADD = 0
  REMOVE = 1
  MODIFY = 2
  VALUE_MAP = {0 => "ADD", 1 => "REMOVE", 2 => "MODIFY"}
  VALID_VALUES = Set.new([ADD, REMOVE, MODIFY]).freeze
end

module NotificationItemFetchMode
  ALL = 0
  APPEND = 1
  VALUE_MAP = {0 => "ALL", 1 => "APPEND"}
  VALID_VALUES = Set.new([ALL, APPEND]).freeze
end

module NotificationQueueType
  GLOBAL = 1
  MESSAGE = 2
  PRIMARY = 3
  VALUE_MAP = {1 => "GLOBAL", 2 => "MESSAGE", 3 => "PRIMARY"}
  VALID_VALUES = Set.new([GLOBAL, MESSAGE, PRIMARY]).freeze
end

module NotificationStatus
  NOTIFICATION_ITEM_EXIST = 1
  TIMELINE_ITEM_EXIST = 2
  NOTE_GROUP_NEW_ITEM_EXIST = 4
  TIMELINE_BUDDYGROUP_CHANGED = 8
  NOTE_ONE_TO_ONE_NEW_ITEM_EXIST = 16
  ALBUM_ITEM_EXIST = 32
  TIMELINE_ITEM_DELETED = 64
  VALUE_MAP = {1 => "NOTIFICATION_ITEM_EXIST", 2 => "TIMELINE_ITEM_EXIST", 4 => "NOTE_GROUP_NEW_ITEM_EXIST", 8 => "TIMELINE_BUDDYGROUP_CHANGED", 16 => "NOTE_ONE_TO_ONE_NEW_ITEM_EXIST", 32 => "ALBUM_ITEM_EXIST", 64 => "TIMELINE_ITEM_DELETED"}
  VALID_VALUES = Set.new([NOTIFICATION_ITEM_EXIST, TIMELINE_ITEM_EXIST, NOTE_GROUP_NEW_ITEM_EXIST, TIMELINE_BUDDYGROUP_CHANGED, NOTE_ONE_TO_ONE_NEW_ITEM_EXIST, ALBUM_ITEM_EXIST, TIMELINE_ITEM_DELETED]).freeze
end

module NotificationType
  APPLE_APNS = 1
  GOOGLE_C2DM = 2
  NHN_NNI = 3
  SKT_AOM = 4
  MS_MPNS = 5
  RIM_BIS = 6
  GOOGLE_GCM = 7
  NOKIA_NNAPI = 8
  TIZEN = 9
  LINE_BOT = 17
  LINE_WAP = 18
  VALUE_MAP = {1 => "APPLE_APNS", 2 => "GOOGLE_C2DM", 3 => "NHN_NNI", 4 => "SKT_AOM", 5 => "MS_MPNS", 6 => "RIM_BIS", 7 => "GOOGLE_GCM", 8 => "NOKIA_NNAPI", 9 => "TIZEN", 17 => "LINE_BOT", 18 => "LINE_WAP"}
  VALID_VALUES = Set.new([APPLE_APNS, GOOGLE_C2DM, NHN_NNI, SKT_AOM, MS_MPNS, RIM_BIS, GOOGLE_GCM, NOKIA_NNAPI, TIZEN, LINE_BOT, LINE_WAP]).freeze
end

module OpStatus
  NORMAL = 0
  ALERT_DISABLED = 1
  VALUE_MAP = {0 => "NORMAL", 1 => "ALERT_DISABLED"}
  VALID_VALUES = Set.new([NORMAL, ALERT_DISABLED]).freeze
end

module OpType
  END_OF_OPERATION = 0
  UPDATE_PROFILE = 1
  NOTIFIED_UPDATE_PROFILE = 2
  REGISTER_USERID = 3
  ADD_CONTACT = 4
  NOTIFIED_ADD_CONTACT = 5
  BLOCK_CONTACT = 6
  UNBLOCK_CONTACT = 7
  NOTIFIED_RECOMMEND_CONTACT = 8
  CREATE_GROUP = 9
  UPDATE_GROUP = 10
  NOTIFIED_UPDATE_GROUP = 11
  INVITE_INTO_GROUP = 12
  NOTIFIED_INVITE_INTO_GROUP = 13
  LEAVE_GROUP = 14
  NOTIFIED_LEAVE_GROUP = 15
  ACCEPT_GROUP_INVITATION = 16
  NOTIFIED_ACCEPT_GROUP_INVITATION = 17
  KICKOUT_FROM_GROUP = 18
  NOTIFIED_KICKOUT_FROM_GROUP = 19
  CREATE_ROOM = 20
  INVITE_INTO_ROOM = 21
  NOTIFIED_INVITE_INTO_ROOM = 22
  LEAVE_ROOM = 23
  NOTIFIED_LEAVE_ROOM = 24
  SEND_MESSAGE = 25
  RECEIVE_MESSAGE = 26
  SEND_MESSAGE_RECEIPT = 27
  RECEIVE_MESSAGE_RECEIPT = 28
  SEND_CONTENT_RECEIPT = 29
  RECEIVE_ANNOUNCEMENT = 30
  CANCEL_INVITATION_GROUP = 31
  NOTIFIED_CANCEL_INVITATION_GROUP = 32
  NOTIFIED_UNREGISTER_USER = 33
  REJECT_GROUP_INVITATION = 34
  NOTIFIED_REJECT_GROUP_INVITATION = 35
  UPDATE_SETTINGS = 36
  NOTIFIED_REGISTER_USER = 37
  INVITE_VIA_EMAIL = 38
  NOTIFIED_REQUEST_RECOVERY = 39
  SEND_CHAT_CHECKED = 40
  SEND_CHAT_REMOVED = 41
  NOTIFIED_FORCE_SYNC = 42
  SEND_CONTENT = 43
  SEND_MESSAGE_MYHOME = 44
  NOTIFIED_UPDATE_CONTENT_PREVIEW = 45
  REMOVE_ALL_MESSAGES = 46
  NOTIFIED_UPDATE_PURCHASES = 47
  DUMMY = 48
  UPDATE_CONTACT = 49
  NOTIFIED_RECEIVED_CALL = 50
  CANCEL_CALL = 51
  NOTIFIED_REDIRECT = 52
  NOTIFIED_CHANNEL_SYNC = 53
  FAILED_SEND_MESSAGE = 54
  NOTIFIED_READ_MESSAGE = 55
  FAILED_EMAIL_CONFIRMATION = 56
  NOTIFIED_CHAT_CONTENT = 58
  NOTIFIED_PUSH_NOTICENTER_ITEM = 59
  VALUE_MAP = {0 => "END_OF_OPERATION", 1 => "UPDATE_PROFILE", 2 => "NOTIFIED_UPDATE_PROFILE", 3 => "REGISTER_USERID", 4 => "ADD_CONTACT", 5 => "NOTIFIED_ADD_CONTACT", 6 => "BLOCK_CONTACT", 7 => "UNBLOCK_CONTACT", 8 => "NOTIFIED_RECOMMEND_CONTACT", 9 => "CREATE_GROUP", 10 => "UPDATE_GROUP", 11 => "NOTIFIED_UPDATE_GROUP", 12 => "INVITE_INTO_GROUP", 13 => "NOTIFIED_INVITE_INTO_GROUP", 14 => "LEAVE_GROUP", 15 => "NOTIFIED_LEAVE_GROUP", 16 => "ACCEPT_GROUP_INVITATION", 17 => "NOTIFIED_ACCEPT_GROUP_INVITATION", 18 => "KICKOUT_FROM_GROUP", 19 => "NOTIFIED_KICKOUT_FROM_GROUP", 20 => "CREATE_ROOM", 21 => "INVITE_INTO_ROOM", 22 => "NOTIFIED_INVITE_INTO_ROOM", 23 => "LEAVE_ROOM", 24 => "NOTIFIED_LEAVE_ROOM", 25 => "SEND_MESSAGE", 26 => "RECEIVE_MESSAGE", 27 => "SEND_MESSAGE_RECEIPT", 28 => "RECEIVE_MESSAGE_RECEIPT", 29 => "SEND_CONTENT_RECEIPT", 30 => "RECEIVE_ANNOUNCEMENT", 31 => "CANCEL_INVITATION_GROUP", 32 => "NOTIFIED_CANCEL_INVITATION_GROUP", 33 => "NOTIFIED_UNREGISTER_USER", 34 => "REJECT_GROUP_INVITATION", 35 => "NOTIFIED_REJECT_GROUP_INVITATION", 36 => "UPDATE_SETTINGS", 37 => "NOTIFIED_REGISTER_USER", 38 => "INVITE_VIA_EMAIL", 39 => "NOTIFIED_REQUEST_RECOVERY", 40 => "SEND_CHAT_CHECKED", 41 => "SEND_CHAT_REMOVED", 42 => "NOTIFIED_FORCE_SYNC", 43 => "SEND_CONTENT", 44 => "SEND_MESSAGE_MYHOME", 45 => "NOTIFIED_UPDATE_CONTENT_PREVIEW", 46 => "REMOVE_ALL_MESSAGES", 47 => "NOTIFIED_UPDATE_PURCHASES", 48 => "DUMMY", 49 => "UPDATE_CONTACT", 50 => "NOTIFIED_RECEIVED_CALL", 51 => "CANCEL_CALL", 52 => "NOTIFIED_REDIRECT", 53 => "NOTIFIED_CHANNEL_SYNC", 54 => "FAILED_SEND_MESSAGE", 55 => "NOTIFIED_READ_MESSAGE", 56 => "FAILED_EMAIL_CONFIRMATION", 58 => "NOTIFIED_CHAT_CONTENT", 59 => "NOTIFIED_PUSH_NOTICENTER_ITEM"}
  VALID_VALUES = Set.new([END_OF_OPERATION, UPDATE_PROFILE, NOTIFIED_UPDATE_PROFILE, REGISTER_USERID, ADD_CONTACT, NOTIFIED_ADD_CONTACT, BLOCK_CONTACT, UNBLOCK_CONTACT, NOTIFIED_RECOMMEND_CONTACT, CREATE_GROUP, UPDATE_GROUP, NOTIFIED_UPDATE_GROUP, INVITE_INTO_GROUP, NOTIFIED_INVITE_INTO_GROUP, LEAVE_GROUP, NOTIFIED_LEAVE_GROUP, ACCEPT_GROUP_INVITATION, NOTIFIED_ACCEPT_GROUP_INVITATION, KICKOUT_FROM_GROUP, NOTIFIED_KICKOUT_FROM_GROUP, CREATE_ROOM, INVITE_INTO_ROOM, NOTIFIED_INVITE_INTO_ROOM, LEAVE_ROOM, NOTIFIED_LEAVE_ROOM, SEND_MESSAGE, RECEIVE_MESSAGE, SEND_MESSAGE_RECEIPT, RECEIVE_MESSAGE_RECEIPT, SEND_CONTENT_RECEIPT, RECEIVE_ANNOUNCEMENT, CANCEL_INVITATION_GROUP, NOTIFIED_CANCEL_INVITATION_GROUP, NOTIFIED_UNREGISTER_USER, REJECT_GROUP_INVITATION, NOTIFIED_REJECT_GROUP_INVITATION, UPDATE_SETTINGS, NOTIFIED_REGISTER_USER, INVITE_VIA_EMAIL, NOTIFIED_REQUEST_RECOVERY, SEND_CHAT_CHECKED, SEND_CHAT_REMOVED, NOTIFIED_FORCE_SYNC, SEND_CONTENT, SEND_MESSAGE_MYHOME, NOTIFIED_UPDATE_CONTENT_PREVIEW, REMOVE_ALL_MESSAGES, NOTIFIED_UPDATE_PURCHASES, DUMMY, UPDATE_CONTACT, NOTIFIED_RECEIVED_CALL, CANCEL_CALL, NOTIFIED_REDIRECT, NOTIFIED_CHANNEL_SYNC, FAILED_SEND_MESSAGE, NOTIFIED_READ_MESSAGE, FAILED_EMAIL_CONFIRMATION, NOTIFIED_CHAT_CONTENT, NOTIFIED_PUSH_NOTICENTER_ITEM]).freeze
end

module PayloadType
  PAYLOAD_BUY = 101
  PAYLOAD_CS = 111
  PAYLOAD_BONUS = 121
  PAYLOAD_EVENT = 131
  VALUE_MAP = {101 => "PAYLOAD_BUY", 111 => "PAYLOAD_CS", 121 => "PAYLOAD_BONUS", 131 => "PAYLOAD_EVENT"}
  VALID_VALUES = Set.new([PAYLOAD_BUY, PAYLOAD_CS, PAYLOAD_BONUS, PAYLOAD_EVENT]).freeze
end

module PaymentPgType
  PAYMENT_PG_NONE = 0
  PAYMENT_PG_AU = 1
  PAYMENT_PG_AL = 2
  VALUE_MAP = {0 => "PAYMENT_PG_NONE", 1 => "PAYMENT_PG_AU", 2 => "PAYMENT_PG_AL"}
  VALID_VALUES = Set.new([PAYMENT_PG_NONE, PAYMENT_PG_AU, PAYMENT_PG_AL]).freeze
end

module PaymentType
  PAYMENT_APPLE = 1
  PAYMENT_GOOGLE = 2
  VALUE_MAP = {1 => "PAYMENT_APPLE", 2 => "PAYMENT_GOOGLE"}
  VALID_VALUES = Set.new([PAYMENT_APPLE, PAYMENT_GOOGLE]).freeze
end

module ProductBannerLinkType
  BANNER_LINK_NONE = 0
  BANNER_LINK_ITEM = 1
  BANNER_LINK_URL = 2
  BANNER_LINK_CATEGORY = 3
  VALUE_MAP = {0 => "BANNER_LINK_NONE", 1 => "BANNER_LINK_ITEM", 2 => "BANNER_LINK_URL", 3 => "BANNER_LINK_CATEGORY"}
  VALID_VALUES = Set.new([BANNER_LINK_NONE, BANNER_LINK_ITEM, BANNER_LINK_URL, BANNER_LINK_CATEGORY]).freeze
end

module ProductEventType
  NO_EVENT = 0
  CARRIER_ANY = 65537
  BUDDY_ANY = 131073
  INSTALL_IOS = 196609
  INSTALL_ANDROID = 196610
  MISSION_ANY = 262145
  MUSTBUY_ANY = 327681
  VALUE_MAP = {0 => "NO_EVENT", 65537 => "CARRIER_ANY", 131073 => "BUDDY_ANY", 196609 => "INSTALL_IOS", 196610 => "INSTALL_ANDROID", 262145 => "MISSION_ANY", 327681 => "MUSTBUY_ANY"}
  VALID_VALUES = Set.new([NO_EVENT, CARRIER_ANY, BUDDY_ANY, INSTALL_IOS, INSTALL_ANDROID, MISSION_ANY, MUSTBUY_ANY]).freeze
end

module ProfileAttribute
  EMAIL = 1
  DISPLAY_NAME = 2
  PHONETIC_NAME = 4
  PICTURE = 8
  STATUS_MESSAGE = 16
  ALLOW_SEARCH_BY_USERID = 32
  ALLOW_SEARCH_BY_EMAIL = 64
  BUDDY_STATUS = 128
  ALL = 255
  VALUE_MAP = {1 => "EMAIL", 2 => "DISPLAY_NAME", 4 => "PHONETIC_NAME", 8 => "PICTURE", 16 => "STATUS_MESSAGE", 32 => "ALLOW_SEARCH_BY_USERID", 64 => "ALLOW_SEARCH_BY_EMAIL", 128 => "BUDDY_STATUS", 255 => "ALL"}
  VALID_VALUES = Set.new([EMAIL, DISPLAY_NAME, PHONETIC_NAME, PICTURE, STATUS_MESSAGE, ALLOW_SEARCH_BY_USERID, ALLOW_SEARCH_BY_EMAIL, BUDDY_STATUS, ALL]).freeze
end

module PublicType
  HIDDEN = 0
  PUBLIC = 1000
  VALUE_MAP = {0 => "HIDDEN", 1000 => "PUBLIC"}
  VALID_VALUES = Set.new([HIDDEN, PUBLIC]).freeze
end

module RedirectType
  NONE = 0
  EXPIRE_SECOND = 1
  VALUE_MAP = {0 => "NONE", 1 => "EXPIRE_SECOND"}
  VALID_VALUES = Set.new([NONE, EXPIRE_SECOND]).freeze
end

module RegistrationType
  PHONE = 0
  EMAIL_WAP = 1
  FACEBOOK = 2305
  SINA = 2306
  RENREN = 2307
  FEIXIN = 2308
  VALUE_MAP = {0 => "PHONE", 1 => "EMAIL_WAP", 2305 => "FACEBOOK", 2306 => "SINA", 2307 => "RENREN", 2308 => "FEIXIN"}
  VALID_VALUES = Set.new([PHONE, EMAIL_WAP, FACEBOOK, SINA, RENREN, FEIXIN]).freeze
end

module SettingsAttribute
  NOTIFICATION_ENABLE = 1
  NOTIFICATION_MUTE_EXPIRATION = 2
  NOTIFICATION_NEW_MESSAGE = 4
  NOTIFICATION_GROUP_INVITATION = 8
  NOTIFICATION_SHOW_MESSAGE = 16
  NOTIFICATION_INCOMING_CALL = 32
  PRIVACY_SYNC_CONTACTS = 64
  PRIVACY_SEARCH_BY_PHONE_NUMBER = 128
  NOTIFICATION_SOUND_MESSAGE = 256
  NOTIFICATION_SOUND_GROUP = 512
  CONTACT_MY_TICKET = 1024
  IDENTITY_PROVIDER = 2048
  IDENTITY_IDENTIFIER = 4096
  PRIVACY_SEARCH_BY_USERID = 8192
  PRIVACY_SEARCH_BY_EMAIL = 16384
  PREFERENCE_LOCALE = 32768
  NOTIFICATION_DISABLED_WITH_SUB = 65536
  SNS_ACCOUNT = 524288
  PHONE_REGISTRATION = 1048576
  PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN = 2097152
  CUSTOM_MODE = 4194304
  PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME = 8388608
  EMAIL_CONFIRMATION_STATUS = 16777216
  PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND = 33554432
  ALL = 2147483647
  VALUE_MAP = {1 => "NOTIFICATION_ENABLE", 2 => "NOTIFICATION_MUTE_EXPIRATION", 4 => "NOTIFICATION_NEW_MESSAGE", 8 => "NOTIFICATION_GROUP_INVITATION", 16 => "NOTIFICATION_SHOW_MESSAGE", 32 => "NOTIFICATION_INCOMING_CALL", 64 => "PRIVACY_SYNC_CONTACTS", 128 => "PRIVACY_SEARCH_BY_PHONE_NUMBER", 256 => "NOTIFICATION_SOUND_MESSAGE", 512 => "NOTIFICATION_SOUND_GROUP", 1024 => "CONTACT_MY_TICKET", 2048 => "IDENTITY_PROVIDER", 4096 => "IDENTITY_IDENTIFIER", 8192 => "PRIVACY_SEARCH_BY_USERID", 16384 => "PRIVACY_SEARCH_BY_EMAIL", 32768 => "PREFERENCE_LOCALE", 65536 => "NOTIFICATION_DISABLED_WITH_SUB", 524288 => "SNS_ACCOUNT", 1048576 => "PHONE_REGISTRATION", 2097152 => "PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN", 4194304 => "CUSTOM_MODE", 8388608 => "PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME", 16777216 => "EMAIL_CONFIRMATION_STATUS", 33554432 => "PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND", 2147483647 => "ALL"}
  VALID_VALUES = Set.new([NOTIFICATION_ENABLE, NOTIFICATION_MUTE_EXPIRATION, NOTIFICATION_NEW_MESSAGE, NOTIFICATION_GROUP_INVITATION, NOTIFICATION_SHOW_MESSAGE, NOTIFICATION_INCOMING_CALL, PRIVACY_SYNC_CONTACTS, PRIVACY_SEARCH_BY_PHONE_NUMBER, NOTIFICATION_SOUND_MESSAGE, NOTIFICATION_SOUND_GROUP, CONTACT_MY_TICKET, IDENTITY_PROVIDER, IDENTITY_IDENTIFIER, PRIVACY_SEARCH_BY_USERID, PRIVACY_SEARCH_BY_EMAIL, PREFERENCE_LOCALE, NOTIFICATION_DISABLED_WITH_SUB, SNS_ACCOUNT, PHONE_REGISTRATION, PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN, CUSTOM_MODE, PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME, EMAIL_CONFIRMATION_STATUS, PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND, ALL]).freeze
end

module SnsIdType
  FACEBOOK = 1
  SINA = 2
  RENREN = 3
  FEIXIN = 4
  VALUE_MAP = {1 => "FACEBOOK", 2 => "SINA", 3 => "RENREN", 4 => "FEIXIN"}
  VALID_VALUES = Set.new([FACEBOOK, SINA, RENREN, FEIXIN]).freeze
end

module SpammerReason
  OTHER = 0
  ADVERTISING = 1
  GENDER_HARASSMENT = 2
  HARASSMENT = 3
  VALUE_MAP = {0 => "OTHER", 1 => "ADVERTISING", 2 => "GENDER_HARASSMENT", 3 => "HARASSMENT"}
  VALID_VALUES = Set.new([OTHER, ADVERTISING, GENDER_HARASSMENT, HARASSMENT]).freeze
end

module SyncActionType
  SYNC = 0
  REPORT = 1
  VALUE_MAP = {0 => "SYNC", 1 => "REPORT"}
  VALID_VALUES = Set.new([SYNC, REPORT]).freeze
end

module SyncCategory
  PROFILE = 0
  SETTINGS = 1
  OPS = 2
  CONTACT = 3
  RECOMMEND = 4
  BLOCK = 5
  GROUP = 6
  ROOM = 7
  NOTIFICATION = 8
  VALUE_MAP = {0 => "PROFILE", 1 => "SETTINGS", 2 => "OPS", 3 => "CONTACT", 4 => "RECOMMEND", 5 => "BLOCK", 6 => "GROUP", 7 => "ROOM", 8 => "NOTIFICATION"}
  VALID_VALUES = Set.new([PROFILE, SETTINGS, OPS, CONTACT, RECOMMEND, BLOCK, GROUP, ROOM, NOTIFICATION]).freeze
end

module TMessageBoxStatus
  ACTIVATED = 1
  UNREAD = 2
  VALUE_MAP = {1 => "ACTIVATED", 2 => "UNREAD"}
  VALID_VALUES = Set.new([ACTIVATED, UNREAD]).freeze
end

module UniversalNotificationServiceErrorCode
  INTERNAL_ERROR = 0
  INVALID_KEY = 1
  ILLEGAL_ARGUMENT = 2
  TOO_MANY_REQUEST = 3
  AUTHENTICATION_FAILED = 4
  NO_WRITE_PERMISSION = 5
  VALUE_MAP = {0 => "INTERNAL_ERROR", 1 => "INVALID_KEY", 2 => "ILLEGAL_ARGUMENT", 3 => "TOO_MANY_REQUEST", 4 => "AUTHENTICATION_FAILED", 5 => "NO_WRITE_PERMISSION"}
  VALID_VALUES = Set.new([INTERNAL_ERROR, INVALID_KEY, ILLEGAL_ARGUMENT, TOO_MANY_REQUEST, AUTHENTICATION_FAILED, NO_WRITE_PERMISSION]).freeze
end

module UnregistrationReason
  UNREGISTRATION_REASON_UNREGISTER_USER = 1
  UNREGISTRATION_REASON_UNBIND_DEVICE = 2
  VALUE_MAP = {1 => "UNREGISTRATION_REASON_UNREGISTER_USER", 2 => "UNREGISTRATION_REASON_UNBIND_DEVICE"}
  VALID_VALUES = Set.new([UNREGISTRATION_REASON_UNREGISTER_USER, UNREGISTRATION_REASON_UNBIND_DEVICE]).freeze
end

module UserAgeType
  OVER = 1
  UNDER = 2
  UNDEFINED = 3
  VALUE_MAP = {1 => "OVER", 2 => "UNDER", 3 => "UNDEFINED"}
  VALID_VALUES = Set.new([OVER, UNDER, UNDEFINED]).freeze
end

module VerificationMethod
  NO_AVAILABLE = 0
  PIN_VIA_SMS = 1
  CALLERID_INDIGO = 2
  PIN_VIA_TTS = 4
  SKIP = 10
  VALUE_MAP = {0 => "NO_AVAILABLE", 1 => "PIN_VIA_SMS", 2 => "CALLERID_INDIGO", 4 => "PIN_VIA_TTS", 10 => "SKIP"}
  VALID_VALUES = Set.new([NO_AVAILABLE, PIN_VIA_SMS, CALLERID_INDIGO, PIN_VIA_TTS, SKIP]).freeze
end

module VerificationResult
  FAILED = 0
  OK_NOT_REGISTERED_YET = 1
  OK_REGISTERED_WITH_SAME_DEVICE = 2
  OK_REGISTERED_WITH_ANOTHER_DEVICE = 3
  VALUE_MAP = {0 => "FAILED", 1 => "OK_NOT_REGISTERED_YET", 2 => "OK_REGISTERED_WITH_SAME_DEVICE", 3 => "OK_REGISTERED_WITH_ANOTHER_DEVICE"}
  VALID_VALUES = Set.new([FAILED, OK_NOT_REGISTERED_YET, OK_REGISTERED_WITH_SAME_DEVICE, OK_REGISTERED_WITH_ANOTHER_DEVICE]).freeze
end

module WapInvitationType
  REGISTRATION = 1
  CHAT = 2
  VALUE_MAP = {1 => "REGISTRATION", 2 => "CHAT"}
  VALID_VALUES = Set.new([REGISTRATION, CHAT]).freeze
end

class AgeCheckDocomoResult
  include ::Thrift::Struct, ::Thrift::Struct_Union
  AUTHURL = 1
  USERAGETYPE = 2

  FIELDS = {
    AUTHURL => {:type => ::Thrift::Types::STRING, :name => 'authUrl'},
    USERAGETYPE => {:type => ::Thrift::Types::I32, :name => 'userAgeType', :enum_class => ::UserAgeType}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @userAgeType.nil? || ::UserAgeType::VALID_VALUES.include?(@userAgeType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field userAgeType!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class AgeCheckRequestResult
  include ::Thrift::Struct, ::Thrift::Struct_Union
  AUTHURL = 1
  SESSIONID = 2

  FIELDS = {
    AUTHURL => {:type => ::Thrift::Types::STRING, :name => 'authUrl'},
    SESSIONID => {:type => ::Thrift::Types::STRING, :name => 'sessionId'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class Announcement
  include ::Thrift::Struct, ::Thrift::Struct_Union
  INDEX = 1
  FORCEUPDATE = 10
  TITLE = 11
  TEXT = 12
  CREATEDTIME = 13
  PICTUREURL = 14
  THUMBNAILURL = 15

  FIELDS = {
    INDEX => {:type => ::Thrift::Types::I32, :name => 'index'},
    FORCEUPDATE => {:type => ::Thrift::Types::BOOL, :name => 'forceUpdate'},
    TITLE => {:type => ::Thrift::Types::STRING, :name => 'title'},
    TEXT => {:type => ::Thrift::Types::STRING, :name => 'text'},
    CREATEDTIME => {:type => ::Thrift::Types::I64, :name => 'createdTime'},
    PICTUREURL => {:type => ::Thrift::Types::STRING, :name => 'pictureUrl'},
    THUMBNAILURL => {:type => ::Thrift::Types::STRING, :name => 'thumbnailUrl'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class ChannelProvider
  include ::Thrift::Struct, ::Thrift::Struct_Union
  NAME = 1

  FIELDS = {
    NAME => {:type => ::Thrift::Types::STRING, :name => 'name'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class ChannelInfo
  include ::Thrift::Struct, ::Thrift::Struct_Union
  CHANNELID = 1
  NAME = 3
  ENTRYPAGEURL = 4
  DESCRIPTIONTEXT = 5
  PROVIDER = 6
  PUBLICTYPE = 7
  ICONIMAGE = 8
  PERMISSIONS = 9
  ICONTHUMBNAILIMAGE = 11
  CHANNELCONFIGURATIONS = 12

  FIELDS = {
    CHANNELID => {:type => ::Thrift::Types::STRING, :name => 'channelId'},
    NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
    ENTRYPAGEURL => {:type => ::Thrift::Types::STRING, :name => 'entryPageUrl'},
    DESCRIPTIONTEXT => {:type => ::Thrift::Types::STRING, :name => 'descriptionText'},
    PROVIDER => {:type => ::Thrift::Types::STRUCT, :name => 'provider', :class => ::ChannelProvider},
    PUBLICTYPE => {:type => ::Thrift::Types::I32, :name => 'publicType', :enum_class => ::PublicType},
    ICONIMAGE => {:type => ::Thrift::Types::STRING, :name => 'iconImage'},
    PERMISSIONS => {:type => ::Thrift::Types::LIST, :name => 'permissions', :element => {:type => ::Thrift::Types::STRING}},
    ICONTHUMBNAILIMAGE => {:type => ::Thrift::Types::STRING, :name => 'iconThumbnailImage'},
    CHANNELCONFIGURATIONS => {:type => ::Thrift::Types::LIST, :name => 'channelConfigurations', :element => {:type => ::Thrift::Types::I32, :enum_class => ::ChannelConfiguration}}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @publicType.nil? || ::PublicType::VALID_VALUES.include?(@publicType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field publicType!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class ApprovedChannelInfo
  include ::Thrift::Struct, ::Thrift::Struct_Union
  CHANNELINFO = 1
  APPROVEDAT = 2

  FIELDS = {
    CHANNELINFO => {:type => ::Thrift::Types::STRUCT, :name => 'channelInfo', :class => ::ChannelInfo},
    APPROVEDAT => {:type => ::Thrift::Types::I64, :name => 'approvedAt'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class ApprovedChannelInfos
  include ::Thrift::Struct, ::Thrift::Struct_Union
  APPROVEDCHANNELINFOS = 1
  REVISION = 2

  FIELDS = {
    APPROVEDCHANNELINFOS => {:type => ::Thrift::Types::LIST, :name => 'approvedChannelInfos', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ApprovedChannelInfo}},
    REVISION => {:type => ::Thrift::Types::I64, :name => 'revision'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class AuthQrcode
  include ::Thrift::Struct, ::Thrift::Struct_Union
  QRCODE = 1
  VERIFIER = 2

  FIELDS = {
    QRCODE => {:type => ::Thrift::Types::STRING, :name => 'qrcode'},
    VERIFIER => {:type => ::Thrift::Types::STRING, :name => 'verifier'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class BuddyBanner
  include ::Thrift::Struct, ::Thrift::Struct_Union
  BUDDYBANNERLINKTYPE = 1
  BUDDYBANNERLINK = 2
  BUDDYBANNERIMAGEURL = 3

  FIELDS = {
    BUDDYBANNERLINKTYPE => {:type => ::Thrift::Types::I32, :name => 'buddyBannerLinkType', :enum_class => ::BuddyBannerLinkType},
    BUDDYBANNERLINK => {:type => ::Thrift::Types::STRING, :name => 'buddyBannerLink'},
    BUDDYBANNERIMAGEURL => {:type => ::Thrift::Types::STRING, :name => 'buddyBannerImageUrl'}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @buddyBannerLinkType.nil? || ::BuddyBannerLinkType::VALID_VALUES.include?(@buddyBannerLinkType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field buddyBannerLinkType!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class BuddyDetail
  include ::Thrift::Struct, ::Thrift::Struct_Union
  MID = 1
  MEMBERCOUNT = 2
  ONAIR = 3
  BUSINESSACCOUNT = 4
  ADDABLE = 5
  ACCEPTABLECONTENTTYPES = 6
  CAPABLEMYHOME = 7

  FIELDS = {
    MID => {:type => ::Thrift::Types::STRING, :name => 'mid'},
    MEMBERCOUNT => {:type => ::Thrift::Types::I64, :name => 'memberCount'},
    ONAIR => {:type => ::Thrift::Types::BOOL, :name => 'onAir'},
    BUSINESSACCOUNT => {:type => ::Thrift::Types::BOOL, :name => 'businessAccount'},
    ADDABLE => {:type => ::Thrift::Types::BOOL, :name => 'addable'},
    ACCEPTABLECONTENTTYPES => {:type => ::Thrift::Types::SET, :name => 'acceptableContentTypes', :element => {:type => ::Thrift::Types::I32, :enum_class => ::ContentType}},
    CAPABLEMYHOME => {:type => ::Thrift::Types::BOOL, :name => 'capableMyhome'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class Contact
  include ::Thrift::Struct, ::Thrift::Struct_Union
  MID = 1
  CREATEDTIME = 2
  TYPE = 10
  STATUS = 11
  RELATION = 21
  DISPLAYNAME = 22
  PHONETICNAME = 23
  PICTURESTATUS = 24
  THUMBNAILURL = 25
  STATUSMESSAGE = 26
  DISPLAYNAMEOVERRIDDEN = 27
  FAVORITETIME = 28
  CAPABLEVOICECALL = 31
  CAPABLEVIDEOCALL = 32
  CAPABLEMYHOME = 33
  CAPABLEBUDDY = 34
  ATTRIBUTES = 35
  SETTINGS = 36
  PICTUREPATH = 37

  FIELDS = {
    MID => {:type => ::Thrift::Types::STRING, :name => 'mid'},
    CREATEDTIME => {:type => ::Thrift::Types::I64, :name => 'createdTime'},
    TYPE => {:type => ::Thrift::Types::I32, :name => 'type', :enum_class => ::ContactType},
    STATUS => {:type => ::Thrift::Types::I32, :name => 'status', :enum_class => ::ContactStatus},
    RELATION => {:type => ::Thrift::Types::I32, :name => 'relation', :enum_class => ::ContactRelation},
    DISPLAYNAME => {:type => ::Thrift::Types::STRING, :name => 'displayName'},
    PHONETICNAME => {:type => ::Thrift::Types::STRING, :name => 'phoneticName'},
    PICTURESTATUS => {:type => ::Thrift::Types::STRING, :name => 'pictureStatus'},
    THUMBNAILURL => {:type => ::Thrift::Types::STRING, :name => 'thumbnailUrl'},
    STATUSMESSAGE => {:type => ::Thrift::Types::STRING, :name => 'statusMessage'},
    DISPLAYNAMEOVERRIDDEN => {:type => ::Thrift::Types::STRING, :name => 'displayNameOverridden'},
    FAVORITETIME => {:type => ::Thrift::Types::I64, :name => 'favoriteTime'},
    CAPABLEVOICECALL => {:type => ::Thrift::Types::BOOL, :name => 'capableVoiceCall'},
    CAPABLEVIDEOCALL => {:type => ::Thrift::Types::BOOL, :name => 'capableVideoCall'},
    CAPABLEMYHOME => {:type => ::Thrift::Types::BOOL, :name => 'capableMyhome'},
    CAPABLEBUDDY => {:type => ::Thrift::Types::BOOL, :name => 'capableBuddy'},
    ATTRIBUTES => {:type => ::Thrift::Types::I32, :name => 'attributes'},
    SETTINGS => {:type => ::Thrift::Types::I64, :name => 'settings'},
    PICTUREPATH => {:type => ::Thrift::Types::STRING, :name => 'picturePath'}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @type.nil? || ::ContactType::VALID_VALUES.include?(@type)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field type!')
    end
    unless @status.nil? || ::ContactStatus::VALID_VALUES.include?(@status)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field status!')
    end
    unless @relation.nil? || ::ContactRelation::VALID_VALUES.include?(@relation)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field relation!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class BuddyList
  include ::Thrift::Struct, ::Thrift::Struct_Union
  CLASSIFICATION = 1
  DISPLAYNAME = 2
  TOTALBUDDYCOUNT = 3
  POPULARCONTACTS = 4

  FIELDS = {
    CLASSIFICATION => {:type => ::Thrift::Types::STRING, :name => 'classification'},
    DISPLAYNAME => {:type => ::Thrift::Types::STRING, :name => 'displayName'},
    TOTALBUDDYCOUNT => {:type => ::Thrift::Types::I32, :name => 'totalBuddyCount'},
    POPULARCONTACTS => {:type => ::Thrift::Types::LIST, :name => 'popularContacts', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Contact}}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class Location
  include ::Thrift::Struct, ::Thrift::Struct_Union
  TITLE = 1
  ADDRESS = 2
  LATITUDE = 3
  LONGITUDE = 4
  PHONE = 5

  FIELDS = {
    TITLE => {:type => ::Thrift::Types::STRING, :name => 'title'},
    ADDRESS => {:type => ::Thrift::Types::STRING, :name => 'address'},
    LATITUDE => {:type => ::Thrift::Types::DOUBLE, :name => 'latitude'},
    LONGITUDE => {:type => ::Thrift::Types::DOUBLE, :name => 'longitude'},
    PHONE => {:type => ::Thrift::Types::STRING, :name => 'phone'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class BuddyMessageRequest
  include ::Thrift::Struct, ::Thrift::Struct_Union
  CONTENTTYPE = 1
  TEXT = 2
  LOCATION = 3
  CONTENT = 4
  CONTENTMETADATA = 5

  FIELDS = {
    CONTENTTYPE => {:type => ::Thrift::Types::I32, :name => 'contentType', :enum_class => ::ContentType},
    TEXT => {:type => ::Thrift::Types::STRING, :name => 'text'},
    LOCATION => {:type => ::Thrift::Types::STRUCT, :name => 'location', :class => ::Location},
    CONTENT => {:type => ::Thrift::Types::STRING, :name => 'content', :binary => true},
    CONTENTMETADATA => {:type => ::Thrift::Types::MAP, :name => 'contentMetadata', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @contentType.nil? || ::ContentType::VALID_VALUES.include?(@contentType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field contentType!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class BuddyOnAirUrls
  include ::Thrift::Struct, ::Thrift::Struct_Union
  HLS = 1
  SMOOTHSTREAMING = 2

  FIELDS = {
    HLS => {:type => ::Thrift::Types::MAP, :name => 'hls', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}},
    SMOOTHSTREAMING => {:type => ::Thrift::Types::MAP, :name => 'smoothStreaming', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class BuddyOnAir
  include ::Thrift::Struct, ::Thrift::Struct_Union
  MID = 1
  FRESHNESSLIFETIME = 3
  ONAIRID = 4
  ONAIR = 5
  TEXT = 11
  VIEWERCOUNT = 12
  TARGETCOUNT = 13
  ONAIRTYPE = 31
  ONAIRURLS = 32

  FIELDS = {
    MID => {:type => ::Thrift::Types::STRING, :name => 'mid'},
    FRESHNESSLIFETIME => {:type => ::Thrift::Types::I64, :name => 'freshnessLifetime'},
    ONAIRID => {:type => ::Thrift::Types::STRING, :name => 'onAirId'},
    ONAIR => {:type => ::Thrift::Types::BOOL, :name => 'onAir'},
    TEXT => {:type => ::Thrift::Types::STRING, :name => 'text'},
    VIEWERCOUNT => {:type => ::Thrift::Types::I64, :name => 'viewerCount'},
    TARGETCOUNT => {:type => ::Thrift::Types::I64, :name => 'targetCount'},
    ONAIRTYPE => {:type => ::Thrift::Types::I32, :name => 'onAirType', :enum_class => ::BuddyOnAirType},
    ONAIRURLS => {:type => ::Thrift::Types::STRUCT, :name => 'onAirUrls', :class => ::BuddyOnAirUrls}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @onAirType.nil? || ::BuddyOnAirType::VALID_VALUES.include?(@onAirType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field onAirType!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class BuddyProfile
  include ::Thrift::Struct, ::Thrift::Struct_Union
  BUDDYID = 1
  MID = 2
  SEARCHID = 3
  DISPLAYNAME = 4
  STATUSMESSAGE = 5
  CONTACTCOUNT = 11

  FIELDS = {
    BUDDYID => {:type => ::Thrift::Types::STRING, :name => 'buddyId'},
    MID => {:type => ::Thrift::Types::STRING, :name => 'mid'},
    SEARCHID => {:type => ::Thrift::Types::STRING, :name => 'searchId'},
    DISPLAYNAME => {:type => ::Thrift::Types::STRING, :name => 'displayName'},
    STATUSMESSAGE => {:type => ::Thrift::Types::STRING, :name => 'statusMessage'},
    CONTACTCOUNT => {:type => ::Thrift::Types::I64, :name => 'contactCount'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class BuddySearchResult
  include ::Thrift::Struct, ::Thrift::Struct_Union
  MID = 1
  DISPLAYNAME = 2
  PICTURESTATUS = 3
  PICTUREPATH = 4
  STATUSMESSAGE = 5
  BUSINESSACCOUNT = 6

  FIELDS = {
    MID => {:type => ::Thrift::Types::STRING, :name => 'mid'},
    DISPLAYNAME => {:type => ::Thrift::Types::STRING, :name => 'displayName'},
    PICTURESTATUS => {:type => ::Thrift::Types::STRING, :name => 'pictureStatus'},
    PICTUREPATH => {:type => ::Thrift::Types::STRING, :name => 'picturePath'},
    STATUSMESSAGE => {:type => ::Thrift::Types::STRING, :name => 'statusMessage'},
    BUSINESSACCOUNT => {:type => ::Thrift::Types::BOOL, :name => 'businessAccount'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class ChannelDomain
  include ::Thrift::Struct, ::Thrift::Struct_Union
  HOST = 1
  REMOVED = 2

  FIELDS = {
    HOST => {:type => ::Thrift::Types::STRING, :name => 'host'},
    REMOVED => {:type => ::Thrift::Types::BOOL, :name => 'removed'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class ChannelDomains
  include ::Thrift::Struct, ::Thrift::Struct_Union
  CHANNELDOMAINS = 1
  REVISION = 2

  FIELDS = {
    CHANNELDOMAINS => {:type => ::Thrift::Types::LIST, :name => 'channelDomains', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ChannelDomain}},
    REVISION => {:type => ::Thrift::Types::I64, :name => 'revision'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class ChannelException < ::Thrift::Exception
  include ::Thrift::Struct, ::Thrift::Struct_Union
  CODE = 1
  REASON = 2
  PARAMETERMAP = 3

  FIELDS = {
    CODE => {:type => ::Thrift::Types::I32, :name => 'code', :enum_class => ::ChannelErrorCode},
    REASON => {:type => ::Thrift::Types::STRING, :name => 'reason'},
    PARAMETERMAP => {:type => ::Thrift::Types::MAP, :name => 'parameterMap', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @code.nil? || ::ChannelErrorCode::VALID_VALUES.include?(@code)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field code!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class ChannelInfos
  include ::Thrift::Struct, ::Thrift::Struct_Union
  CHANNELINFOS = 1
  REVISION = 2

  FIELDS = {
    CHANNELINFOS => {:type => ::Thrift::Types::LIST, :name => 'channelInfos', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ChannelInfo}},
    REVISION => {:type => ::Thrift::Types::I64, :name => 'revision'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class ChannelNotificationSetting
  include ::Thrift::Struct, ::Thrift::Struct_Union
  CHANNELID = 1
  NAME = 2
  NOTIFICATIONRECEIVABLE = 3
  MESSAGERECEIVABLE = 4
  SHOWDEFAULT = 5

  FIELDS = {
    CHANNELID => {:type => ::Thrift::Types::STRING, :name => 'channelId'},
    NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
    NOTIFICATIONRECEIVABLE => {:type => ::Thrift::Types::BOOL, :name => 'notificationReceivable'},
    MESSAGERECEIVABLE => {:type => ::Thrift::Types::BOOL, :name => 'messageReceivable'},
    SHOWDEFAULT => {:type => ::Thrift::Types::BOOL, :name => 'showDefault'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class ChannelSyncDatas
  include ::Thrift::Struct, ::Thrift::Struct_Union
  CHANNELINFOS = 1
  CHANNELDOMAINS = 2
  REVISION = 3
  EXPIRES = 4

  FIELDS = {
    CHANNELINFOS => {:type => ::Thrift::Types::LIST, :name => 'channelInfos', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ChannelInfo}},
    CHANNELDOMAINS => {:type => ::Thrift::Types::LIST, :name => 'channelDomains', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ChannelDomain}},
    REVISION => {:type => ::Thrift::Types::I64, :name => 'revision'},
    EXPIRES => {:type => ::Thrift::Types::I64, :name => 'expires'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class ChannelToken
  include ::Thrift::Struct, ::Thrift::Struct_Union
  TOKEN = 1
  OBSTOKEN = 2
  EXPIRATION = 3
  REFRESHTOKEN = 4
  CHANNELACCESSTOKEN = 5

  FIELDS = {
    TOKEN => {:type => ::Thrift::Types::STRING, :name => 'token'},
    OBSTOKEN => {:type => ::Thrift::Types::STRING, :name => 'obsToken'},
    EXPIRATION => {:type => ::Thrift::Types::I64, :name => 'expiration'},
    REFRESHTOKEN => {:type => ::Thrift::Types::STRING, :name => 'refreshToken'},
    CHANNELACCESSTOKEN => {:type => ::Thrift::Types::STRING, :name => 'channelAccessToken'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class Coin
  include ::Thrift::Struct, ::Thrift::Struct_Union
  FREECOINBALANCE = 1
  PAYEDCOINBALANCE = 2
  TOTALCOINBALANCE = 3
  REWARDCOINBALANCE = 4

  FIELDS = {
    FREECOINBALANCE => {:type => ::Thrift::Types::I32, :name => 'freeCoinBalance'},
    PAYEDCOINBALANCE => {:type => ::Thrift::Types::I32, :name => 'payedCoinBalance'},
    TOTALCOINBALANCE => {:type => ::Thrift::Types::I32, :name => 'totalCoinBalance'},
    REWARDCOINBALANCE => {:type => ::Thrift::Types::I32, :name => 'rewardCoinBalance'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class CoinPayLoad
  include ::Thrift::Struct, ::Thrift::Struct_Union
  PAYCOIN = 1
  FREECOIN = 2
  TYPE = 3
  REWARDCOIN = 4

  FIELDS = {
    PAYCOIN => {:type => ::Thrift::Types::I32, :name => 'payCoin'},
    FREECOIN => {:type => ::Thrift::Types::I32, :name => 'freeCoin'},
    TYPE => {:type => ::Thrift::Types::I32, :name => 'type', :enum_class => ::PayloadType},
    REWARDCOIN => {:type => ::Thrift::Types::I32, :name => 'rewardCoin'}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @type.nil? || ::PayloadType::VALID_VALUES.include?(@type)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field type!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class CoinHistory
  include ::Thrift::Struct, ::Thrift::Struct_Union
  PAYDATE = 1
  COINBALANCE = 2
  COIN = 3
  PRICE = 4
  TITLE = 5
  REFUND = 6
  PAYSEQ = 7
  CURRENCY = 8
  CURRENCYSIGN = 9
  DISPLAYPRICE = 10
  PAYLOAD = 11
  CHANNELID = 12

  FIELDS = {
    PAYDATE => {:type => ::Thrift::Types::I64, :name => 'payDate'},
    COINBALANCE => {:type => ::Thrift::Types::I32, :name => 'coinBalance'},
    COIN => {:type => ::Thrift::Types::I32, :name => 'coin'},
    PRICE => {:type => ::Thrift::Types::STRING, :name => 'price'},
    TITLE => {:type => ::Thrift::Types::STRING, :name => 'title'},
    REFUND => {:type => ::Thrift::Types::BOOL, :name => 'refund'},
    PAYSEQ => {:type => ::Thrift::Types::STRING, :name => 'paySeq'},
    CURRENCY => {:type => ::Thrift::Types::STRING, :name => 'currency'},
    CURRENCYSIGN => {:type => ::Thrift::Types::STRING, :name => 'currencySign'},
    DISPLAYPRICE => {:type => ::Thrift::Types::STRING, :name => 'displayPrice'},
    PAYLOAD => {:type => ::Thrift::Types::STRUCT, :name => 'payload', :class => ::CoinPayLoad},
    CHANNELID => {:type => ::Thrift::Types::STRING, :name => 'channelId'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class CoinHistoryCondition
  include ::Thrift::Struct, ::Thrift::Struct_Union
  START = 1
  SIZE = 2
  LANGUAGE = 3
  EDDT = 4
  APPSTORECODE = 5

  FIELDS = {
    START => {:type => ::Thrift::Types::I64, :name => 'start'},
    SIZE => {:type => ::Thrift::Types::I32, :name => 'size'},
    LANGUAGE => {:type => ::Thrift::Types::STRING, :name => 'language'},
    EDDT => {:type => ::Thrift::Types::STRING, :name => 'eddt'},
    APPSTORECODE => {:type => ::Thrift::Types::I32, :name => 'appStoreCode', :enum_class => ::PaymentType}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @appStoreCode.nil? || ::PaymentType::VALID_VALUES.include?(@appStoreCode)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field appStoreCode!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class CoinHistoryResult
  include ::Thrift::Struct, ::Thrift::Struct_Union
  HISTORYS = 1
  BALANCE = 2
  HASNEXT = 3

  FIELDS = {
    HISTORYS => {:type => ::Thrift::Types::LIST, :name => 'historys', :element => {:type => ::Thrift::Types::STRUCT, :class => ::CoinHistory}},
    BALANCE => {:type => ::Thrift::Types::STRUCT, :name => 'balance', :class => ::Coin},
    HASNEXT => {:type => ::Thrift::Types::BOOL, :name => 'hasNext'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class CoinProductItem
  include ::Thrift::Struct, ::Thrift::Struct_Union
  ITEMID = 1
  COIN = 2
  FREECOIN = 3
  CURRENCY = 5
  PRICE = 6
  DISPLAYPRICE = 7
  NAME = 8
  DESC = 9

  FIELDS = {
    ITEMID => {:type => ::Thrift::Types::STRING, :name => 'itemId'},
    COIN => {:type => ::Thrift::Types::I32, :name => 'coin'},
    FREECOIN => {:type => ::Thrift::Types::I32, :name => 'freeCoin'},
    CURRENCY => {:type => ::Thrift::Types::STRING, :name => 'currency'},
    PRICE => {:type => ::Thrift::Types::STRING, :name => 'price'},
    DISPLAYPRICE => {:type => ::Thrift::Types::STRING, :name => 'displayPrice'},
    NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
    DESC => {:type => ::Thrift::Types::STRING, :name => 'desc'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class CoinPurchaseConfirm
  include ::Thrift::Struct, ::Thrift::Struct_Union
  ORDERID = 1
  APPSTORECODE = 2
  RECEIPT = 3
  SIGNATURE = 4
  SELLER = 5
  REQUESTTYPE = 6
  IGNORERECEIPT = 7

  FIELDS = {
    ORDERID => {:type => ::Thrift::Types::STRING, :name => 'orderId'},
    APPSTORECODE => {:type => ::Thrift::Types::I32, :name => 'appStoreCode', :enum_class => ::PaymentType},
    RECEIPT => {:type => ::Thrift::Types::STRING, :name => 'receipt'},
    SIGNATURE => {:type => ::Thrift::Types::STRING, :name => 'signature'},
    SELLER => {:type => ::Thrift::Types::STRING, :name => 'seller'},
    REQUESTTYPE => {:type => ::Thrift::Types::STRING, :name => 'requestType'},
    IGNORERECEIPT => {:type => ::Thrift::Types::BOOL, :name => 'ignoreReceipt'}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @appStoreCode.nil? || ::PaymentType::VALID_VALUES.include?(@appStoreCode)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field appStoreCode!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class CoinPurchaseReservation
  include ::Thrift::Struct, ::Thrift::Struct_Union
  PRODUCTID = 1
  COUNTRY = 2
  CURRENCY = 3
  PRICE = 4
  APPSTORECODE = 5
  LANGUAGE = 6
  PGCODE = 7
  REDIRECTURL = 8

  FIELDS = {
    PRODUCTID => {:type => ::Thrift::Types::STRING, :name => 'productId'},
    COUNTRY => {:type => ::Thrift::Types::STRING, :name => 'country'},
    CURRENCY => {:type => ::Thrift::Types::STRING, :name => 'currency'},
    PRICE => {:type => ::Thrift::Types::STRING, :name => 'price'},
    APPSTORECODE => {:type => ::Thrift::Types::I32, :name => 'appStoreCode', :enum_class => ::PaymentType},
    LANGUAGE => {:type => ::Thrift::Types::STRING, :name => 'language'},
    PGCODE => {:type => ::Thrift::Types::I32, :name => 'pgCode', :enum_class => ::PaymentPgType},
    REDIRECTURL => {:type => ::Thrift::Types::STRING, :name => 'redirectUrl'}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @appStoreCode.nil? || ::PaymentType::VALID_VALUES.include?(@appStoreCode)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field appStoreCode!')
    end
    unless @pgCode.nil? || ::PaymentPgType::VALID_VALUES.include?(@pgCode)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field pgCode!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class CoinUseReservationItem
  include ::Thrift::Struct, ::Thrift::Struct_Union
  ITEMID = 1
  ITEMNAME = 2
  AMOUNT = 3

  FIELDS = {
    ITEMID => {:type => ::Thrift::Types::STRING, :name => 'itemId'},
    ITEMNAME => {:type => ::Thrift::Types::STRING, :name => 'itemName'},
    AMOUNT => {:type => ::Thrift::Types::I32, :name => 'amount'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class CoinUseReservation
  include ::Thrift::Struct, ::Thrift::Struct_Union
  CHANNELID = 1
  SHOPORDERID = 2
  APPSTORECODE = 3
  ITEMS = 4
  COUNTRY = 5

  FIELDS = {
    CHANNELID => {:type => ::Thrift::Types::STRING, :name => 'channelId'},
    SHOPORDERID => {:type => ::Thrift::Types::STRING, :name => 'shopOrderId'},
    APPSTORECODE => {:type => ::Thrift::Types::I32, :name => 'appStoreCode', :enum_class => ::PaymentType},
    ITEMS => {:type => ::Thrift::Types::LIST, :name => 'items', :element => {:type => ::Thrift::Types::STRUCT, :class => ::CoinUseReservationItem}},
    COUNTRY => {:type => ::Thrift::Types::STRING, :name => 'country'}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @appStoreCode.nil? || ::PaymentType::VALID_VALUES.include?(@appStoreCode)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field appStoreCode!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class CompactContact
  include ::Thrift::Struct, ::Thrift::Struct_Union
  MID = 1
  CREATEDTIME = 2
  MODIFIEDTIME = 3
  STATUS = 4
  SETTINGS = 5
  DISPLAYNAMEOVERRIDDEN = 6

  FIELDS = {
    MID => {:type => ::Thrift::Types::STRING, :name => 'mid'},
    CREATEDTIME => {:type => ::Thrift::Types::I64, :name => 'createdTime'},
    MODIFIEDTIME => {:type => ::Thrift::Types::I64, :name => 'modifiedTime'},
    STATUS => {:type => ::Thrift::Types::I32, :name => 'status', :enum_class => ::ContactStatus},
    SETTINGS => {:type => ::Thrift::Types::I64, :name => 'settings'},
    DISPLAYNAMEOVERRIDDEN => {:type => ::Thrift::Types::STRING, :name => 'displayNameOverridden'}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @status.nil? || ::ContactStatus::VALID_VALUES.include?(@status)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field status!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class ContactModification
  include ::Thrift::Struct, ::Thrift::Struct_Union
  TYPE = 1
  LUID = 2
  PHONES = 11
  EMAILS = 12
  USERIDS = 13

  FIELDS = {
    TYPE => {:type => ::Thrift::Types::I32, :name => 'type', :enum_class => ::ModificationType},
    LUID => {:type => ::Thrift::Types::STRING, :name => 'luid'},
    PHONES => {:type => ::Thrift::Types::LIST, :name => 'phones', :element => {:type => ::Thrift::Types::STRING}},
    EMAILS => {:type => ::Thrift::Types::LIST, :name => 'emails', :element => {:type => ::Thrift::Types::STRING}},
    USERIDS => {:type => ::Thrift::Types::LIST, :name => 'userids', :element => {:type => ::Thrift::Types::STRING}}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @type.nil? || ::ModificationType::VALID_VALUES.include?(@type)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field type!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class ContactRegistration
  include ::Thrift::Struct, ::Thrift::Struct_Union
  CONTACT = 1
  LUID = 10
  CONTACTTYPE = 11
  CONTACTKEY = 12

  FIELDS = {
    CONTACT => {:type => ::Thrift::Types::STRUCT, :name => 'contact', :class => ::Contact},
    LUID => {:type => ::Thrift::Types::STRING, :name => 'luid'},
    CONTACTTYPE => {:type => ::Thrift::Types::I32, :name => 'contactType', :enum_class => ::ContactType},
    CONTACTKEY => {:type => ::Thrift::Types::STRING, :name => 'contactKey'}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @contactType.nil? || ::ContactType::VALID_VALUES.include?(@contactType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field contactType!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class ContactReport
  include ::Thrift::Struct, ::Thrift::Struct_Union
  MID = 1
  EXISTS = 2
  CONTACT = 3

  FIELDS = {
    MID => {:type => ::Thrift::Types::STRING, :name => 'mid'},
    EXISTS => {:type => ::Thrift::Types::BOOL, :name => 'exists'},
    CONTACT => {:type => ::Thrift::Types::STRUCT, :name => 'contact', :class => ::Contact}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class ContactReportResult
  include ::Thrift::Struct, ::Thrift::Struct_Union
  MID = 1
  EXISTS = 2

  FIELDS = {
    MID => {:type => ::Thrift::Types::STRING, :name => 'mid'},
    EXISTS => {:type => ::Thrift::Types::BOOL, :name => 'exists'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class DeviceInfo
  include ::Thrift::Struct, ::Thrift::Struct_Union
  DEVICENAME = 1
  SYSTEMNAME = 2
  SYSTEMVERSION = 3
  MODEL = 4
  CARRIERCODE = 10
  CARRIERNAME = 11
  APPLICATIONTYPE = 20

  FIELDS = {
    DEVICENAME => {:type => ::Thrift::Types::STRING, :name => 'deviceName'},
    SYSTEMNAME => {:type => ::Thrift::Types::STRING, :name => 'systemName'},
    SYSTEMVERSION => {:type => ::Thrift::Types::STRING, :name => 'systemVersion'},
    MODEL => {:type => ::Thrift::Types::STRING, :name => 'model'},
    CARRIERCODE => {:type => ::Thrift::Types::I32, :name => 'carrierCode', :enum_class => ::CarrierCode},
    CARRIERNAME => {:type => ::Thrift::Types::STRING, :name => 'carrierName'},
    APPLICATIONTYPE => {:type => ::Thrift::Types::I32, :name => 'applicationType', :enum_class => ::ApplicationType}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @carrierCode.nil? || ::CarrierCode::VALID_VALUES.include?(@carrierCode)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field carrierCode!')
    end
    unless @applicationType.nil? || ::ApplicationType::VALID_VALUES.include?(@applicationType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field applicationType!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class EmailConfirmation
  include ::Thrift::Struct, ::Thrift::Struct_Union
  USEPASSWORDSET = 1
  EMAIL = 2
  PASSWORD = 3
  IGNOREDUPLICATION = 4

  FIELDS = {
    USEPASSWORDSET => {:type => ::Thrift::Types::BOOL, :name => 'usePasswordSet'},
    EMAIL => {:type => ::Thrift::Types::STRING, :name => 'email'},
    PASSWORD => {:type => ::Thrift::Types::STRING, :name => 'password'},
    IGNOREDUPLICATION => {:type => ::Thrift::Types::BOOL, :name => 'ignoreDuplication'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class EmailConfirmationSession
  include ::Thrift::Struct, ::Thrift::Struct_Union
  EMAILCONFIRMATIONTYPE = 1
  VERIFIER = 2
  TARGETEMAIL = 3

  FIELDS = {
    EMAILCONFIRMATIONTYPE => {:type => ::Thrift::Types::I32, :name => 'emailConfirmationType', :enum_class => ::EmailConfirmationType},
    VERIFIER => {:type => ::Thrift::Types::STRING, :name => 'verifier'},
    TARGETEMAIL => {:type => ::Thrift::Types::STRING, :name => 'targetEmail'}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @emailConfirmationType.nil? || ::EmailConfirmationType::VALID_VALUES.include?(@emailConfirmationType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field emailConfirmationType!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class FriendChannelMatrix
  include ::Thrift::Struct, ::Thrift::Struct_Union
  CHANNELID = 1
  REPRESENTMID = 2
  COUNT = 3

  FIELDS = {
    CHANNELID => {:type => ::Thrift::Types::STRING, :name => 'channelId'},
    REPRESENTMID => {:type => ::Thrift::Types::STRING, :name => 'representMid'},
    COUNT => {:type => ::Thrift::Types::I32, :name => 'count'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class FriendChannelMatricesResponse
  include ::Thrift::Struct, ::Thrift::Struct_Union
  EXPIRES = 1
  MATRICES = 2

  FIELDS = {
    EXPIRES => {:type => ::Thrift::Types::I64, :name => 'expires'},
    MATRICES => {:type => ::Thrift::Types::LIST, :name => 'matrices', :element => {:type => ::Thrift::Types::STRUCT, :class => ::FriendChannelMatrix}}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class Geolocation
  include ::Thrift::Struct, ::Thrift::Struct_Union
  LONGITUDE = 1
  LATITUDE = 2

  FIELDS = {
    LONGITUDE => {:type => ::Thrift::Types::DOUBLE, :name => 'longitude'},
    LATITUDE => {:type => ::Thrift::Types::DOUBLE, :name => 'latitude'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class NotificationTarget
  include ::Thrift::Struct, ::Thrift::Struct_Union
  APPLICATIONTYPE = 1
  APPLICATIONVERSION = 2
  REGION = 3

  FIELDS = {
    APPLICATIONTYPE => {:type => ::Thrift::Types::STRING, :name => 'applicationType'},
    APPLICATIONVERSION => {:type => ::Thrift::Types::STRING, :name => 'applicationVersion'},
    REGION => {:type => ::Thrift::Types::STRING, :name => 'region'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class GlobalEvent
  include ::Thrift::Struct, ::Thrift::Struct_Union
  KEY = 1
  TARGETS = 2
  CREATEDTIME = 3
  DATA = 4
  MAXDELAY = 5

  FIELDS = {
    KEY => {:type => ::Thrift::Types::STRING, :name => 'key'},
    TARGETS => {:type => ::Thrift::Types::LIST, :name => 'targets', :element => {:type => ::Thrift::Types::STRUCT, :class => ::NotificationTarget}},
    CREATEDTIME => {:type => ::Thrift::Types::I64, :name => 'createdTime'},
    DATA => {:type => ::Thrift::Types::I64, :name => 'data'},
    MAXDELAY => {:type => ::Thrift::Types::I32, :name => 'maxDelay'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class Group
  include ::Thrift::Struct, ::Thrift::Struct_Union
  ID = 1
  CREATEDTIME = 2
  NAME = 10
  PICTURESTATUS = 11
  MEMBERS = 20
  CREATOR = 21
  INVITEE = 22
  NOTIFICATIONDISABLED = 31

  FIELDS = {
    ID => {:type => ::Thrift::Types::STRING, :name => 'id'},
    CREATEDTIME => {:type => ::Thrift::Types::I64, :name => 'createdTime'},
    NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
    PICTURESTATUS => {:type => ::Thrift::Types::STRING, :name => 'pictureStatus'},
    MEMBERS => {:type => ::Thrift::Types::LIST, :name => 'members', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Contact}},
    CREATOR => {:type => ::Thrift::Types::STRUCT, :name => 'creator', :class => ::Contact},
    INVITEE => {:type => ::Thrift::Types::LIST, :name => 'invitee', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Contact}},
    NOTIFICATIONDISABLED => {:type => ::Thrift::Types::BOOL, :name => 'notificationDisabled'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class IdentityCredential
  include ::Thrift::Struct, ::Thrift::Struct_Union
  PROVIDER = 1
  IDENTIFIER = 2
  PASSWORD = 3

  FIELDS = {
    PROVIDER => {:type => ::Thrift::Types::I32, :name => 'provider', :enum_class => ::IdentityProvider},
    IDENTIFIER => {:type => ::Thrift::Types::STRING, :name => 'identifier'},
    PASSWORD => {:type => ::Thrift::Types::STRING, :name => 'password'}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @provider.nil? || ::IdentityProvider::VALID_VALUES.include?(@provider)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field provider!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class LastReadMessageId
  include ::Thrift::Struct, ::Thrift::Struct_Union
  MID = 1
  LASTREADMESSAGEID = 2

  FIELDS = {
    MID => {:type => ::Thrift::Types::STRING, :name => 'mid'},
    LASTREADMESSAGEID => {:type => ::Thrift::Types::STRING, :name => 'lastReadMessageId'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class LastReadMessageIds
  include ::Thrift::Struct, ::Thrift::Struct_Union
  CHATID = 1
  LASTREADMESSAGEIDS = 2

  FIELDS = {
    CHATID => {:type => ::Thrift::Types::STRING, :name => 'chatId'},
    LASTREADMESSAGEIDS => {:type => ::Thrift::Types::LIST, :name => 'lastReadMessageIds', :element => {:type => ::Thrift::Types::STRUCT, :class => ::LastReadMessageId}}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class LoginResult
  include ::Thrift::Struct, ::Thrift::Struct_Union
  AUTHTOKEN = 1
  CERTIFICATE = 2
  VERIFIER = 3
  PINCODE = 4
  TYPE = 5

  FIELDS = {
    AUTHTOKEN => {:type => ::Thrift::Types::STRING, :name => 'authToken'},
    CERTIFICATE => {:type => ::Thrift::Types::STRING, :name => 'certificate'},
    VERIFIER => {:type => ::Thrift::Types::STRING, :name => 'verifier'},
    PINCODE => {:type => ::Thrift::Types::STRING, :name => 'pinCode'},
    TYPE => {:type => ::Thrift::Types::I32, :name => 'type', :enum_class => ::LoginResultType}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @type.nil? || ::LoginResultType::VALID_VALUES.include?(@type)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field type!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class LoginSession
  include ::Thrift::Struct, ::Thrift::Struct_Union
  TOKENKEY = 1
  EXPIRATIONTIME = 3
  APPLICATIONTYPE = 11
  SYSTEMNAME = 12
  ACCESSLOCATION = 22

  FIELDS = {
    TOKENKEY => {:type => ::Thrift::Types::STRING, :name => 'tokenKey'},
    EXPIRATIONTIME => {:type => ::Thrift::Types::I64, :name => 'expirationTime'},
    APPLICATIONTYPE => {:type => ::Thrift::Types::I32, :name => 'applicationType', :enum_class => ::ApplicationType},
    SYSTEMNAME => {:type => ::Thrift::Types::STRING, :name => 'systemName'},
    ACCESSLOCATION => {:type => ::Thrift::Types::STRING, :name => 'accessLocation'}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @applicationType.nil? || ::ApplicationType::VALID_VALUES.include?(@applicationType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field applicationType!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class Message
  include ::Thrift::Struct, ::Thrift::Struct_Union
  FROM = 1
  TO = 2
  TOTYPE = 3
  ID = 4
  CREATEDTIME = 5
  DELIVEREDTIME = 6
  TEXT = 10
  LOCATION = 11
  HASCONTENT = 14
  CONTENTTYPE = 15
  CONTENTPREVIEW = 17
  CONTENTMETADATA = 18

  FIELDS = {
    FROM => {:type => ::Thrift::Types::STRING, :name => 'from'},
    TO => {:type => ::Thrift::Types::STRING, :name => 'to'},
    TOTYPE => {:type => ::Thrift::Types::I32, :name => 'toType', :enum_class => ::MIDType},
    ID => {:type => ::Thrift::Types::STRING, :name => 'id'},
    CREATEDTIME => {:type => ::Thrift::Types::I64, :name => 'createdTime'},
    DELIVEREDTIME => {:type => ::Thrift::Types::I64, :name => 'deliveredTime'},
    TEXT => {:type => ::Thrift::Types::STRING, :name => 'text'},
    LOCATION => {:type => ::Thrift::Types::STRUCT, :name => 'location', :class => ::Location},
    HASCONTENT => {:type => ::Thrift::Types::BOOL, :name => 'hasContent'},
    CONTENTTYPE => {:type => ::Thrift::Types::I32, :name => 'contentType', :enum_class => ::ContentType},
    CONTENTPREVIEW => {:type => ::Thrift::Types::STRING, :name => 'contentPreview', :binary => true},
    CONTENTMETADATA => {:type => ::Thrift::Types::MAP, :name => 'contentMetadata', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @toType.nil? || ::MIDType::VALID_VALUES.include?(@toType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field toType!')
    end
    unless @contentType.nil? || ::ContentType::VALID_VALUES.include?(@contentType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field contentType!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class MessageOperation
  include ::Thrift::Struct, ::Thrift::Struct_Union
  REVISION = 1
  CREATEDTIME = 2
  TYPE = 3
  REQSEQ = 4
  STATUS = 5
  PARAM1 = 10
  PARAM2 = 11
  PARAM3 = 12
  MESSAGE = 20

  FIELDS = {
    REVISION => {:type => ::Thrift::Types::I64, :name => 'revision'},
    CREATEDTIME => {:type => ::Thrift::Types::I64, :name => 'createdTime'},
    TYPE => {:type => ::Thrift::Types::I32, :name => 'type', :enum_class => ::MessageOperationType},
    REQSEQ => {:type => ::Thrift::Types::I32, :name => 'reqSeq'},
    STATUS => {:type => ::Thrift::Types::I32, :name => 'status', :enum_class => ::OpStatus},
    PARAM1 => {:type => ::Thrift::Types::STRING, :name => 'param1'},
    PARAM2 => {:type => ::Thrift::Types::STRING, :name => 'param2'},
    PARAM3 => {:type => ::Thrift::Types::STRING, :name => 'param3'},
    MESSAGE => {:type => ::Thrift::Types::STRUCT, :name => 'message', :class => ::Message}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @type.nil? || ::MessageOperationType::VALID_VALUES.include?(@type)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field type!')
    end
    unless @status.nil? || ::OpStatus::VALID_VALUES.include?(@status)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field status!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class MessageOperations
  include ::Thrift::Struct, ::Thrift::Struct_Union
  OPERATIONS = 1
  ENDFLAG = 2

  FIELDS = {
    OPERATIONS => {:type => ::Thrift::Types::LIST, :name => 'operations', :element => {:type => ::Thrift::Types::STRUCT, :class => ::MessageOperation}},
    ENDFLAG => {:type => ::Thrift::Types::BOOL, :name => 'endFlag'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class MetaProfile
  include ::Thrift::Struct, ::Thrift::Struct_Union
  CREATETIME = 1
  REGIONCODE = 2
  IDENTITIES = 3

  FIELDS = {
    CREATETIME => {:type => ::Thrift::Types::I64, :name => 'createTime'},
    REGIONCODE => {:type => ::Thrift::Types::STRING, :name => 'regionCode'},
    IDENTITIES => {:type => ::Thrift::Types::MAP, :name => 'identities', :key => {:type => ::Thrift::Types::I32, :enum_class => ::RegistrationType}, :value => {:type => ::Thrift::Types::STRING}}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class NotificationItem
  include ::Thrift::Struct, ::Thrift::Struct_Union
  ID = 1
  FROM = 2
  TO = 3
  FROMCHANNEL = 4
  TOCHANNEL = 5
  REVISION = 7
  CREATEDTIME = 8
  CONTENT = 9

  FIELDS = {
    ID => {:type => ::Thrift::Types::STRING, :name => 'id'},
    FROM => {:type => ::Thrift::Types::STRING, :name => 'from'},
    TO => {:type => ::Thrift::Types::STRING, :name => 'to'},
    FROMCHANNEL => {:type => ::Thrift::Types::STRING, :name => 'fromChannel'},
    TOCHANNEL => {:type => ::Thrift::Types::STRING, :name => 'toChannel'},
    REVISION => {:type => ::Thrift::Types::I64, :name => 'revision'},
    CREATEDTIME => {:type => ::Thrift::Types::I64, :name => 'createdTime'},
    CONTENT => {:type => ::Thrift::Types::MAP, :name => 'content', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class NotificationFetchResult
  include ::Thrift::Struct, ::Thrift::Struct_Union
  FETCHMODE = 1
  ITEMLIST = 2

  FIELDS = {
    FETCHMODE => {:type => ::Thrift::Types::I32, :name => 'fetchMode', :enum_class => ::NotificationItemFetchMode},
    ITEMLIST => {:type => ::Thrift::Types::LIST, :name => 'itemList', :element => {:type => ::Thrift::Types::STRUCT, :class => ::NotificationItem}}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @fetchMode.nil? || ::NotificationItemFetchMode::VALID_VALUES.include?(@fetchMode)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field fetchMode!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class Operation
  include ::Thrift::Struct, ::Thrift::Struct_Union
  REVISION = 1
  CREATEDTIME = 2
  TYPE = 3
  REQSEQ = 4
  CHECKSUM = 5
  STATUS = 7
  PARAM1 = 10
  PARAM2 = 11
  PARAM3 = 12
  MESSAGE = 20

  FIELDS = {
    REVISION => {:type => ::Thrift::Types::I64, :name => 'revision'},
    CREATEDTIME => {:type => ::Thrift::Types::I64, :name => 'createdTime'},
    TYPE => {:type => ::Thrift::Types::I32, :name => 'type', :enum_class => ::OpType},
    REQSEQ => {:type => ::Thrift::Types::I32, :name => 'reqSeq'},
    CHECKSUM => {:type => ::Thrift::Types::STRING, :name => 'checksum'},
    STATUS => {:type => ::Thrift::Types::I32, :name => 'status', :enum_class => ::OpStatus},
    PARAM1 => {:type => ::Thrift::Types::STRING, :name => 'param1'},
    PARAM2 => {:type => ::Thrift::Types::STRING, :name => 'param2'},
    PARAM3 => {:type => ::Thrift::Types::STRING, :name => 'param3'},
    MESSAGE => {:type => ::Thrift::Types::STRUCT, :name => 'message', :class => ::Message}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @type.nil? || ::OpType::VALID_VALUES.include?(@type)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field type!')
    end
    unless @status.nil? || ::OpStatus::VALID_VALUES.include?(@status)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field status!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class PaymentReservation
  include ::Thrift::Struct, ::Thrift::Struct_Union
  RECEIVERMID = 1
  PRODUCTID = 2
  LANGUAGE = 3
  LOCATION = 4
  CURRENCY = 5
  PRICE = 6
  APPSTORECODE = 7
  MESSAGETEXT = 8
  MESSAGETEMPLATE = 9
  PACKAGEID = 10

  FIELDS = {
    RECEIVERMID => {:type => ::Thrift::Types::STRING, :name => 'receiverMid'},
    PRODUCTID => {:type => ::Thrift::Types::STRING, :name => 'productId'},
    LANGUAGE => {:type => ::Thrift::Types::STRING, :name => 'language'},
    LOCATION => {:type => ::Thrift::Types::STRING, :name => 'location'},
    CURRENCY => {:type => ::Thrift::Types::STRING, :name => 'currency'},
    PRICE => {:type => ::Thrift::Types::STRING, :name => 'price'},
    APPSTORECODE => {:type => ::Thrift::Types::I32, :name => 'appStoreCode', :enum_class => ::PaymentType},
    MESSAGETEXT => {:type => ::Thrift::Types::STRING, :name => 'messageText'},
    MESSAGETEMPLATE => {:type => ::Thrift::Types::I32, :name => 'messageTemplate'},
    PACKAGEID => {:type => ::Thrift::Types::I64, :name => 'packageId'}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @appStoreCode.nil? || ::PaymentType::VALID_VALUES.include?(@appStoreCode)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field appStoreCode!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class PaymentReservationResult
  include ::Thrift::Struct, ::Thrift::Struct_Union
  ORDERID = 1
  CONFIRMURL = 2
  EXTRAS = 3

  FIELDS = {
    ORDERID => {:type => ::Thrift::Types::STRING, :name => 'orderId'},
    CONFIRMURL => {:type => ::Thrift::Types::STRING, :name => 'confirmUrl'},
    EXTRAS => {:type => ::Thrift::Types::MAP, :name => 'extras', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class Product
  include ::Thrift::Struct, ::Thrift::Struct_Union
  PRODUCTID = 1
  PACKAGEID = 2
  VERSION = 3
  AUTHORNAME = 4
  ONSALE = 5
  VALIDDAYS = 6
  SALETYPE = 7
  COPYRIGHT = 8
  TITLE = 9
  DESCRIPTIONTEXT = 10
  SHOPORDERID = 11
  FROMMID = 12
  TOMID = 13
  VALIDUNTIL = 14
  PRICETIER = 15
  PRICE = 16
  CURRENCY = 17
  CURRENCYSYMBOL = 18
  PAYMENTTYPE = 19
  CREATEDATE = 20
  OWNFLAG = 21
  EVENTTYPE = 22
  URLSCHEMA = 23
  DOWNLOADURL = 24
  BUDDYMID = 25
  PUBLISHSINCE = 26
  NEWFLAG = 27
  MISSIONFLAG = 28

  FIELDS = {
    PRODUCTID => {:type => ::Thrift::Types::STRING, :name => 'productId'},
    PACKAGEID => {:type => ::Thrift::Types::I64, :name => 'packageId'},
    VERSION => {:type => ::Thrift::Types::I32, :name => 'version'},
    AUTHORNAME => {:type => ::Thrift::Types::STRING, :name => 'authorName'},
    ONSALE => {:type => ::Thrift::Types::BOOL, :name => 'onSale'},
    VALIDDAYS => {:type => ::Thrift::Types::I32, :name => 'validDays'},
    SALETYPE => {:type => ::Thrift::Types::I32, :name => 'saleType'},
    COPYRIGHT => {:type => ::Thrift::Types::STRING, :name => 'copyright'},
    TITLE => {:type => ::Thrift::Types::STRING, :name => 'title'},
    DESCRIPTIONTEXT => {:type => ::Thrift::Types::STRING, :name => 'descriptionText'},
    SHOPORDERID => {:type => ::Thrift::Types::I64, :name => 'shopOrderId'},
    FROMMID => {:type => ::Thrift::Types::STRING, :name => 'fromMid'},
    TOMID => {:type => ::Thrift::Types::STRING, :name => 'toMid'},
    VALIDUNTIL => {:type => ::Thrift::Types::I64, :name => 'validUntil'},
    PRICETIER => {:type => ::Thrift::Types::I32, :name => 'priceTier'},
    PRICE => {:type => ::Thrift::Types::STRING, :name => 'price'},
    CURRENCY => {:type => ::Thrift::Types::STRING, :name => 'currency'},
    CURRENCYSYMBOL => {:type => ::Thrift::Types::STRING, :name => 'currencySymbol'},
    PAYMENTTYPE => {:type => ::Thrift::Types::I32, :name => 'paymentType', :enum_class => ::PaymentType},
    CREATEDATE => {:type => ::Thrift::Types::I64, :name => 'createDate'},
    OWNFLAG => {:type => ::Thrift::Types::BOOL, :name => 'ownFlag'},
    EVENTTYPE => {:type => ::Thrift::Types::I32, :name => 'eventType', :enum_class => ::ProductEventType},
    URLSCHEMA => {:type => ::Thrift::Types::STRING, :name => 'urlSchema'},
    DOWNLOADURL => {:type => ::Thrift::Types::STRING, :name => 'downloadUrl'},
    BUDDYMID => {:type => ::Thrift::Types::STRING, :name => 'buddyMid'},
    PUBLISHSINCE => {:type => ::Thrift::Types::I64, :name => 'publishSince'},
    NEWFLAG => {:type => ::Thrift::Types::BOOL, :name => 'newFlag'},
    MISSIONFLAG => {:type => ::Thrift::Types::BOOL, :name => 'missionFlag'}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @paymentType.nil? || ::PaymentType::VALID_VALUES.include?(@paymentType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field paymentType!')
    end
    unless @eventType.nil? || ::ProductEventType::VALID_VALUES.include?(@eventType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field eventType!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class ProductList
  include ::Thrift::Struct, ::Thrift::Struct_Union
  HASNEXT = 1
  BANNERSEQUENCE = 4
  BANNERTARGETTYPE = 5
  BANNERTARGETPATH = 6
  PRODUCTLIST = 7
  BANNERLANG = 8

  FIELDS = {
    HASNEXT => {:type => ::Thrift::Types::BOOL, :name => 'hasNext'},
    BANNERSEQUENCE => {:type => ::Thrift::Types::I64, :name => 'bannerSequence'},
    BANNERTARGETTYPE => {:type => ::Thrift::Types::I32, :name => 'bannerTargetType', :enum_class => ::ProductBannerLinkType},
    BANNERTARGETPATH => {:type => ::Thrift::Types::STRING, :name => 'bannerTargetPath'},
    PRODUCTLIST => {:type => ::Thrift::Types::LIST, :name => 'productList', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Product}},
    BANNERLANG => {:type => ::Thrift::Types::STRING, :name => 'bannerLang'}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @bannerTargetType.nil? || ::ProductBannerLinkType::VALID_VALUES.include?(@bannerTargetType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field bannerTargetType!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class ProductSimple
  include ::Thrift::Struct, ::Thrift::Struct_Union
  PRODUCTID = 1
  PACKAGEID = 2
  VERSION = 3
  ONSALE = 4
  VALIDUNTIL = 5

  FIELDS = {
    PRODUCTID => {:type => ::Thrift::Types::STRING, :name => 'productId'},
    PACKAGEID => {:type => ::Thrift::Types::I64, :name => 'packageId'},
    VERSION => {:type => ::Thrift::Types::I32, :name => 'version'},
    ONSALE => {:type => ::Thrift::Types::BOOL, :name => 'onSale'},
    VALIDUNTIL => {:type => ::Thrift::Types::I64, :name => 'validUntil'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class ProductSimpleList
  include ::Thrift::Struct, ::Thrift::Struct_Union
  HASNEXT = 1
  REINVOKEHOUR = 2
  LASTVERSIONSEQ = 3
  PRODUCTLIST = 4
  RECENTNEWRELEASEDATE = 5
  RECENTEVENTRELEASEDATE = 6

  FIELDS = {
    HASNEXT => {:type => ::Thrift::Types::BOOL, :name => 'hasNext'},
    REINVOKEHOUR => {:type => ::Thrift::Types::I32, :name => 'reinvokeHour'},
    LASTVERSIONSEQ => {:type => ::Thrift::Types::I64, :name => 'lastVersionSeq'},
    PRODUCTLIST => {:type => ::Thrift::Types::LIST, :name => 'productList', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ProductSimple}},
    RECENTNEWRELEASEDATE => {:type => ::Thrift::Types::I64, :name => 'recentNewReleaseDate'},
    RECENTEVENTRELEASEDATE => {:type => ::Thrift::Types::I64, :name => 'recentEventReleaseDate'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class Profile
  include ::Thrift::Struct, ::Thrift::Struct_Union
  MID = 1
  USERID = 3
  PHONE = 10
  EMAIL = 11
  REGIONCODE = 12
  DISPLAYNAME = 20
  PHONETICNAME = 21
  PICTURESTATUS = 22
  THUMBNAILURL = 23
  STATUSMESSAGE = 24
  ALLOWSEARCHBYUSERID = 31
  ALLOWSEARCHBYEMAIL = 32
  PICTUREPATH = 33

  FIELDS = {
    MID => {:type => ::Thrift::Types::STRING, :name => 'mid'},
    USERID => {:type => ::Thrift::Types::STRING, :name => 'userid'},
    PHONE => {:type => ::Thrift::Types::STRING, :name => 'phone'},
    EMAIL => {:type => ::Thrift::Types::STRING, :name => 'email'},
    REGIONCODE => {:type => ::Thrift::Types::STRING, :name => 'regionCode'},
    DISPLAYNAME => {:type => ::Thrift::Types::STRING, :name => 'displayName'},
    PHONETICNAME => {:type => ::Thrift::Types::STRING, :name => 'phoneticName'},
    PICTURESTATUS => {:type => ::Thrift::Types::STRING, :name => 'pictureStatus'},
    THUMBNAILURL => {:type => ::Thrift::Types::STRING, :name => 'thumbnailUrl'},
    STATUSMESSAGE => {:type => ::Thrift::Types::STRING, :name => 'statusMessage'},
    ALLOWSEARCHBYUSERID => {:type => ::Thrift::Types::BOOL, :name => 'allowSearchByUserid'},
    ALLOWSEARCHBYEMAIL => {:type => ::Thrift::Types::BOOL, :name => 'allowSearchByEmail'},
    PICTUREPATH => {:type => ::Thrift::Types::STRING, :name => 'picturePath'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class ProximityMatchCandidateResult
  include ::Thrift::Struct, ::Thrift::Struct_Union
  USERS = 1
  BUDDIES = 2

  FIELDS = {
    USERS => {:type => ::Thrift::Types::LIST, :name => 'users', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Contact}},
    BUDDIES => {:type => ::Thrift::Types::LIST, :name => 'buddies', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Contact}}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class RegisterWithSnsIdResult
  include ::Thrift::Struct, ::Thrift::Struct_Union
  AUTHTOKEN = 1
  USERCREATED = 2

  FIELDS = {
    AUTHTOKEN => {:type => ::Thrift::Types::STRING, :name => 'authToken'},
    USERCREATED => {:type => ::Thrift::Types::BOOL, :name => 'userCreated'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class RequestTokenResponse
  include ::Thrift::Struct, ::Thrift::Struct_Union
  REQUESTTOKEN = 1
  RETURNURL = 2

  FIELDS = {
    REQUESTTOKEN => {:type => ::Thrift::Types::STRING, :name => 'requestToken'},
    RETURNURL => {:type => ::Thrift::Types::STRING, :name => 'returnUrl'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class Room
  include ::Thrift::Struct, ::Thrift::Struct_Union
  MID = 1
  CREATEDTIME = 2
  CONTACTS = 10
  NOTIFICATIONDISABLED = 31

  FIELDS = {
    MID => {:type => ::Thrift::Types::STRING, :name => 'mid'},
    CREATEDTIME => {:type => ::Thrift::Types::I64, :name => 'createdTime'},
    CONTACTS => {:type => ::Thrift::Types::LIST, :name => 'contacts', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Contact}},
    NOTIFICATIONDISABLED => {:type => ::Thrift::Types::BOOL, :name => 'notificationDisabled'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class RSAKey
  include ::Thrift::Struct, ::Thrift::Struct_Union
  KEYNM = 1
  NVALUE = 2
  EVALUE = 3
  SESSIONKEY = 4

  FIELDS = {
    KEYNM => {:type => ::Thrift::Types::STRING, :name => 'keynm'},
    NVALUE => {:type => ::Thrift::Types::STRING, :name => 'nvalue'},
    EVALUE => {:type => ::Thrift::Types::STRING, :name => 'evalue'},
    SESSIONKEY => {:type => ::Thrift::Types::STRING, :name => 'sessionKey'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SendBuddyMessageResult
  include ::Thrift::Struct, ::Thrift::Struct_Union
  REQUESTID = 1
  STATE = 2
  MESSAGEID = 3
  EVENTNO = 4
  RECEIVERCOUNT = 11
  SUCCESSCOUNT = 12
  FAILCOUNT = 13
  CANCELCOUNT = 14
  BLOCKCOUNT = 15
  UNREGISTERCOUNT = 16
  TIMESTAMP = 21
  MESSAGE = 22

  FIELDS = {
    REQUESTID => {:type => ::Thrift::Types::STRING, :name => 'requestId'},
    STATE => {:type => ::Thrift::Types::I32, :name => 'state', :enum_class => ::BuddyResultState},
    MESSAGEID => {:type => ::Thrift::Types::STRING, :name => 'messageId'},
    EVENTNO => {:type => ::Thrift::Types::I32, :name => 'eventNo'},
    RECEIVERCOUNT => {:type => ::Thrift::Types::I64, :name => 'receiverCount'},
    SUCCESSCOUNT => {:type => ::Thrift::Types::I64, :name => 'successCount'},
    FAILCOUNT => {:type => ::Thrift::Types::I64, :name => 'failCount'},
    CANCELCOUNT => {:type => ::Thrift::Types::I64, :name => 'cancelCount'},
    BLOCKCOUNT => {:type => ::Thrift::Types::I64, :name => 'blockCount'},
    UNREGISTERCOUNT => {:type => ::Thrift::Types::I64, :name => 'unregisterCount'},
    TIMESTAMP => {:type => ::Thrift::Types::I64, :name => 'timestamp'},
    MESSAGE => {:type => ::Thrift::Types::STRING, :name => 'message'}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @state.nil? || ::BuddyResultState::VALID_VALUES.include?(@state)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field state!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class SetBuddyOnAirResult
  include ::Thrift::Struct, ::Thrift::Struct_Union
  REQUESTID = 1
  STATE = 2
  EVENTNO = 3
  RECEIVERCOUNT = 11
  SUCCESSCOUNT = 12
  FAILCOUNT = 13
  CANCELCOUNT = 14
  UNREGISTERCOUNT = 15
  TIMESTAMP = 21
  MESSAGE = 22

  FIELDS = {
    REQUESTID => {:type => ::Thrift::Types::STRING, :name => 'requestId'},
    STATE => {:type => ::Thrift::Types::I32, :name => 'state', :enum_class => ::BuddyResultState},
    EVENTNO => {:type => ::Thrift::Types::I32, :name => 'eventNo'},
    RECEIVERCOUNT => {:type => ::Thrift::Types::I64, :name => 'receiverCount'},
    SUCCESSCOUNT => {:type => ::Thrift::Types::I64, :name => 'successCount'},
    FAILCOUNT => {:type => ::Thrift::Types::I64, :name => 'failCount'},
    CANCELCOUNT => {:type => ::Thrift::Types::I64, :name => 'cancelCount'},
    UNREGISTERCOUNT => {:type => ::Thrift::Types::I64, :name => 'unregisterCount'},
    TIMESTAMP => {:type => ::Thrift::Types::I64, :name => 'timestamp'},
    MESSAGE => {:type => ::Thrift::Types::STRING, :name => 'message'}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @state.nil? || ::BuddyResultState::VALID_VALUES.include?(@state)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field state!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class Settings
  include ::Thrift::Struct, ::Thrift::Struct_Union
  NOTIFICATIONENABLE = 10
  NOTIFICATIONMUTEEXPIRATION = 11
  NOTIFICATIONNEWMESSAGE = 12
  NOTIFICATIONGROUPINVITATION = 13
  NOTIFICATIONSHOWMESSAGE = 14
  NOTIFICATIONINCOMINGCALL = 15
  NOTIFICATIONSOUNDMESSAGE = 16
  NOTIFICATIONSOUNDGROUP = 17
  NOTIFICATIONDISABLEDWITHSUB = 18
  PRIVACYSYNCCONTACTS = 20
  PRIVACYSEARCHBYPHONENUMBER = 21
  PRIVACYSEARCHBYUSERID = 22
  PRIVACYSEARCHBYEMAIL = 23
  PRIVACYALLOWSECONDARYDEVICELOGIN = 24
  PRIVACYPROFILEIMAGEPOSTTOMYHOME = 25
  PRIVACYRECEIVEMESSAGESFROMNOTFRIEND = 26
  CONTACTMYTICKET = 30
  IDENTITYPROVIDER = 40
  IDENTITYIDENTIFIER = 41
  SNSACCOUNTS = 42
  PHONEREGISTRATION = 43
  EMAILCONFIRMATIONSTATUS = 44
  PREFERENCELOCALE = 50
  CUSTOMMODES = 60

  FIELDS = {
    NOTIFICATIONENABLE => {:type => ::Thrift::Types::BOOL, :name => 'notificationEnable'},
    NOTIFICATIONMUTEEXPIRATION => {:type => ::Thrift::Types::I64, :name => 'notificationMuteExpiration'},
    NOTIFICATIONNEWMESSAGE => {:type => ::Thrift::Types::BOOL, :name => 'notificationNewMessage'},
    NOTIFICATIONGROUPINVITATION => {:type => ::Thrift::Types::BOOL, :name => 'notificationGroupInvitation'},
    NOTIFICATIONSHOWMESSAGE => {:type => ::Thrift::Types::BOOL, :name => 'notificationShowMessage'},
    NOTIFICATIONINCOMINGCALL => {:type => ::Thrift::Types::BOOL, :name => 'notificationIncomingCall'},
    NOTIFICATIONSOUNDMESSAGE => {:type => ::Thrift::Types::STRING, :name => 'notificationSoundMessage'},
    NOTIFICATIONSOUNDGROUP => {:type => ::Thrift::Types::STRING, :name => 'notificationSoundGroup'},
    NOTIFICATIONDISABLEDWITHSUB => {:type => ::Thrift::Types::BOOL, :name => 'notificationDisabledWithSub'},
    PRIVACYSYNCCONTACTS => {:type => ::Thrift::Types::BOOL, :name => 'privacySyncContacts'},
    PRIVACYSEARCHBYPHONENUMBER => {:type => ::Thrift::Types::BOOL, :name => 'privacySearchByPhoneNumber'},
    PRIVACYSEARCHBYUSERID => {:type => ::Thrift::Types::BOOL, :name => 'privacySearchByUserid'},
    PRIVACYSEARCHBYEMAIL => {:type => ::Thrift::Types::BOOL, :name => 'privacySearchByEmail'},
    PRIVACYALLOWSECONDARYDEVICELOGIN => {:type => ::Thrift::Types::BOOL, :name => 'privacyAllowSecondaryDeviceLogin'},
    PRIVACYPROFILEIMAGEPOSTTOMYHOME => {:type => ::Thrift::Types::BOOL, :name => 'privacyProfileImagePostToMyhome'},
    PRIVACYRECEIVEMESSAGESFROMNOTFRIEND => {:type => ::Thrift::Types::BOOL, :name => 'privacyReceiveMessagesFromNotFriend'},
    CONTACTMYTICKET => {:type => ::Thrift::Types::STRING, :name => 'contactMyTicket'},
    IDENTITYPROVIDER => {:type => ::Thrift::Types::I32, :name => 'identityProvider', :enum_class => ::IdentityProvider},
    IDENTITYIDENTIFIER => {:type => ::Thrift::Types::STRING, :name => 'identityIdentifier'},
    SNSACCOUNTS => {:type => ::Thrift::Types::MAP, :name => 'snsAccounts', :key => {:type => ::Thrift::Types::I32, :enum_class => ::SnsIdType}, :value => {:type => ::Thrift::Types::STRING}},
    PHONEREGISTRATION => {:type => ::Thrift::Types::BOOL, :name => 'phoneRegistration'},
    EMAILCONFIRMATIONSTATUS => {:type => ::Thrift::Types::I32, :name => 'emailConfirmationStatus', :enum_class => ::EmailConfirmationStatus},
    PREFERENCELOCALE => {:type => ::Thrift::Types::STRING, :name => 'preferenceLocale'},
    CUSTOMMODES => {:type => ::Thrift::Types::MAP, :name => 'customModes', :key => {:type => ::Thrift::Types::I32, :enum_class => ::CustomMode}, :value => {:type => ::Thrift::Types::STRING}}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @identityProvider.nil? || ::IdentityProvider::VALID_VALUES.include?(@identityProvider)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field identityProvider!')
    end
    unless @emailConfirmationStatus.nil? || ::EmailConfirmationStatus::VALID_VALUES.include?(@emailConfirmationStatus)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field emailConfirmationStatus!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class SimpleChannelClient
  include ::Thrift::Struct, ::Thrift::Struct_Union
  APPLICATIONTYPE = 1
  APPLICATIONVERSION = 2
  LOCALE = 3

  FIELDS = {
    APPLICATIONTYPE => {:type => ::Thrift::Types::STRING, :name => 'applicationType'},
    APPLICATIONVERSION => {:type => ::Thrift::Types::STRING, :name => 'applicationVersion'},
    LOCALE => {:type => ::Thrift::Types::STRING, :name => 'locale'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SimpleChannelContact
  include ::Thrift::Struct, ::Thrift::Struct_Union
  MID = 1
  DISPLAYNAME = 2
  PICTURESTATUS = 3
  PICTUREPATH = 4
  STATUSMESSAGE = 5

  FIELDS = {
    MID => {:type => ::Thrift::Types::STRING, :name => 'mid'},
    DISPLAYNAME => {:type => ::Thrift::Types::STRING, :name => 'displayName'},
    PICTURESTATUS => {:type => ::Thrift::Types::STRING, :name => 'pictureStatus'},
    PICTUREPATH => {:type => ::Thrift::Types::STRING, :name => 'picturePath'},
    STATUSMESSAGE => {:type => ::Thrift::Types::STRING, :name => 'statusMessage'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SnsFriend
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SNSUSERID = 1
  SNSUSERNAME = 2
  SNSIDTYPE = 3

  FIELDS = {
    SNSUSERID => {:type => ::Thrift::Types::STRING, :name => 'snsUserId'},
    SNSUSERNAME => {:type => ::Thrift::Types::STRING, :name => 'snsUserName'},
    SNSIDTYPE => {:type => ::Thrift::Types::I32, :name => 'snsIdType', :enum_class => ::SnsIdType}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @snsIdType.nil? || ::SnsIdType::VALID_VALUES.include?(@snsIdType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field snsIdType!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class SnsFriendContactRegistration
  include ::Thrift::Struct, ::Thrift::Struct_Union
  CONTACT = 1
  SNSIDTYPE = 2
  SNSUSERID = 3

  FIELDS = {
    CONTACT => {:type => ::Thrift::Types::STRUCT, :name => 'contact', :class => ::Contact},
    SNSIDTYPE => {:type => ::Thrift::Types::I32, :name => 'snsIdType', :enum_class => ::SnsIdType},
    SNSUSERID => {:type => ::Thrift::Types::STRING, :name => 'snsUserId'}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @snsIdType.nil? || ::SnsIdType::VALID_VALUES.include?(@snsIdType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field snsIdType!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class SnsFriendModification
  include ::Thrift::Struct, ::Thrift::Struct_Union
  TYPE = 1
  SNSFRIEND = 2

  FIELDS = {
    TYPE => {:type => ::Thrift::Types::I32, :name => 'type', :enum_class => ::ModificationType},
    SNSFRIEND => {:type => ::Thrift::Types::STRUCT, :name => 'snsFriend', :class => ::SnsFriend}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @type.nil? || ::ModificationType::VALID_VALUES.include?(@type)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field type!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class SnsFriends
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SNSFRIENDS = 1
  HASMORE = 2

  FIELDS = {
    SNSFRIENDS => {:type => ::Thrift::Types::LIST, :name => 'snsFriends', :element => {:type => ::Thrift::Types::STRUCT, :class => ::SnsFriend}},
    HASMORE => {:type => ::Thrift::Types::BOOL, :name => 'hasMore'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SnsIdUserStatus
  include ::Thrift::Struct, ::Thrift::Struct_Union
  USEREXISTING = 1
  PHONENUMBERREGISTERED = 2
  SAMEDEVICE = 3

  FIELDS = {
    USEREXISTING => {:type => ::Thrift::Types::BOOL, :name => 'userExisting'},
    PHONENUMBERREGISTERED => {:type => ::Thrift::Types::BOOL, :name => 'phoneNumberRegistered'},
    SAMEDEVICE => {:type => ::Thrift::Types::BOOL, :name => 'sameDevice'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SnsProfile
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SNSUSERID = 1
  SNSUSERNAME = 2
  EMAIL = 3
  THUMBNAILURL = 4

  FIELDS = {
    SNSUSERID => {:type => ::Thrift::Types::STRING, :name => 'snsUserId'},
    SNSUSERNAME => {:type => ::Thrift::Types::STRING, :name => 'snsUserName'},
    EMAIL => {:type => ::Thrift::Types::STRING, :name => 'email'},
    THUMBNAILURL => {:type => ::Thrift::Types::STRING, :name => 'thumbnailUrl'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SystemConfiguration
  include ::Thrift::Struct, ::Thrift::Struct_Union
  ENDPOINT = 1
  ENDPOINTSSL = 2
  UPDATEURL = 3
  C2DMACCOUNT = 11
  NNISERVER = 12

  FIELDS = {
    ENDPOINT => {:type => ::Thrift::Types::STRING, :name => 'endpoint'},
    ENDPOINTSSL => {:type => ::Thrift::Types::STRING, :name => 'endpointSsl'},
    UPDATEURL => {:type => ::Thrift::Types::STRING, :name => 'updateUrl'},
    C2DMACCOUNT => {:type => ::Thrift::Types::STRING, :name => 'c2dmAccount'},
    NNISERVER => {:type => ::Thrift::Types::STRING, :name => 'nniServer'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class TalkException < ::Thrift::Exception
  include ::Thrift::Struct, ::Thrift::Struct_Union
  CODE = 1
  REASON = 2
  PARAMETERMAP = 3

  FIELDS = {
    CODE => {:type => ::Thrift::Types::I32, :name => 'code', :enum_class => ::ErrorCode},
    REASON => {:type => ::Thrift::Types::STRING, :name => 'reason'},
    PARAMETERMAP => {:type => ::Thrift::Types::MAP, :name => 'parameterMap', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @code.nil? || ::ErrorCode::VALID_VALUES.include?(@code)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field code!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class Ticket
  include ::Thrift::Struct, ::Thrift::Struct_Union
  ID = 1
  EXPIRATIONTIME = 10
  MAXUSECOUNT = 21

  FIELDS = {
    ID => {:type => ::Thrift::Types::STRING, :name => 'id'},
    EXPIRATIONTIME => {:type => ::Thrift::Types::I64, :name => 'expirationTime'},
    MAXUSECOUNT => {:type => ::Thrift::Types::I32, :name => 'maxUseCount'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class TMessageBox
  include ::Thrift::Struct, ::Thrift::Struct_Union
  ID = 1
  CHANNELID = 2
  LASTSEQ = 5
  UNREADCOUNT = 6
  LASTMODIFIEDTIME = 7
  STATUS = 8
  MIDTYPE = 9
  LASTMESSAGES = 10

  FIELDS = {
    ID => {:type => ::Thrift::Types::STRING, :name => 'id'},
    CHANNELID => {:type => ::Thrift::Types::STRING, :name => 'channelId'},
    LASTSEQ => {:type => ::Thrift::Types::I64, :name => 'lastSeq'},
    UNREADCOUNT => {:type => ::Thrift::Types::I64, :name => 'unreadCount'},
    LASTMODIFIEDTIME => {:type => ::Thrift::Types::I64, :name => 'lastModifiedTime'},
    STATUS => {:type => ::Thrift::Types::I32, :name => 'status'},
    MIDTYPE => {:type => ::Thrift::Types::I32, :name => 'midType', :enum_class => ::MIDType},
    LASTMESSAGES => {:type => ::Thrift::Types::LIST, :name => 'lastMessages', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Message}}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @midType.nil? || ::MIDType::VALID_VALUES.include?(@midType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field midType!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class TMessageBoxWrapUp
  include ::Thrift::Struct, ::Thrift::Struct_Union
  MESSAGEBOX = 1
  NAME = 2
  CONTACTS = 3
  PICTUREREVISION = 4

  FIELDS = {
    MESSAGEBOX => {:type => ::Thrift::Types::STRUCT, :name => 'messageBox', :class => ::TMessageBox},
    NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
    CONTACTS => {:type => ::Thrift::Types::LIST, :name => 'contacts', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Contact}},
    PICTUREREVISION => {:type => ::Thrift::Types::STRING, :name => 'pictureRevision'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class TMessageBoxWrapUpResponse
  include ::Thrift::Struct, ::Thrift::Struct_Union
  MESSAGEBOXWRAPUPLIST = 1
  TOTALSIZE = 2

  FIELDS = {
    MESSAGEBOXWRAPUPLIST => {:type => ::Thrift::Types::LIST, :name => 'messageBoxWrapUpList', :element => {:type => ::Thrift::Types::STRUCT, :class => ::TMessageBoxWrapUp}},
    TOTALSIZE => {:type => ::Thrift::Types::I32, :name => 'totalSize'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class UniversalNotificationServiceException < ::Thrift::Exception
  include ::Thrift::Struct, ::Thrift::Struct_Union
  CODE = 1
  REASON = 2
  PARAMETERMAP = 3

  FIELDS = {
    CODE => {:type => ::Thrift::Types::I32, :name => 'code', :enum_class => ::UniversalNotificationServiceErrorCode},
    REASON => {:type => ::Thrift::Types::STRING, :name => 'reason'},
    PARAMETERMAP => {:type => ::Thrift::Types::MAP, :name => 'parameterMap', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @code.nil? || ::UniversalNotificationServiceErrorCode::VALID_VALUES.include?(@code)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field code!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class UpdateBuddyProfileResult
  include ::Thrift::Struct, ::Thrift::Struct_Union
  REQUESTID = 1
  STATE = 2
  EVENTNO = 3
  RECEIVERCOUNT = 11
  SUCCESSCOUNT = 12
  FAILCOUNT = 13
  CANCELCOUNT = 14
  UNREGISTERCOUNT = 15
  TIMESTAMP = 21
  MESSAGE = 22

  FIELDS = {
    REQUESTID => {:type => ::Thrift::Types::STRING, :name => 'requestId'},
    STATE => {:type => ::Thrift::Types::I32, :name => 'state', :enum_class => ::BuddyResultState},
    EVENTNO => {:type => ::Thrift::Types::I32, :name => 'eventNo'},
    RECEIVERCOUNT => {:type => ::Thrift::Types::I64, :name => 'receiverCount'},
    SUCCESSCOUNT => {:type => ::Thrift::Types::I64, :name => 'successCount'},
    FAILCOUNT => {:type => ::Thrift::Types::I64, :name => 'failCount'},
    CANCELCOUNT => {:type => ::Thrift::Types::I64, :name => 'cancelCount'},
    UNREGISTERCOUNT => {:type => ::Thrift::Types::I64, :name => 'unregisterCount'},
    TIMESTAMP => {:type => ::Thrift::Types::I64, :name => 'timestamp'},
    MESSAGE => {:type => ::Thrift::Types::STRING, :name => 'message'}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @state.nil? || ::BuddyResultState::VALID_VALUES.include?(@state)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field state!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class UserAuthStatus
  include ::Thrift::Struct, ::Thrift::Struct_Union
  PHONENUMBERREGISTERED = 1
  REGISTEREDSNSIDTYPES = 2

  FIELDS = {
    PHONENUMBERREGISTERED => {:type => ::Thrift::Types::BOOL, :name => 'phoneNumberRegistered'},
    REGISTEREDSNSIDTYPES => {:type => ::Thrift::Types::LIST, :name => 'registeredSnsIdTypes', :element => {:type => ::Thrift::Types::I32, :enum_class => ::SnsIdType}}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class VerificationSessionData
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SESSIONID = 1
  METHOD = 2
  CALLBACK = 3
  NORMALIZEDPHONE = 4
  COUNTRYCODE = 5
  NATIONALSIGNIFICANTNUMBER = 6
  AVAILABLEVERIFICATIONMETHODS = 7

  FIELDS = {
    SESSIONID => {:type => ::Thrift::Types::STRING, :name => 'sessionId'},
    METHOD => {:type => ::Thrift::Types::I32, :name => 'method', :enum_class => ::VerificationMethod},
    CALLBACK => {:type => ::Thrift::Types::STRING, :name => 'callback'},
    NORMALIZEDPHONE => {:type => ::Thrift::Types::STRING, :name => 'normalizedPhone'},
    COUNTRYCODE => {:type => ::Thrift::Types::STRING, :name => 'countryCode'},
    NATIONALSIGNIFICANTNUMBER => {:type => ::Thrift::Types::STRING, :name => 'nationalSignificantNumber'},
    AVAILABLEVERIFICATIONMETHODS => {:type => ::Thrift::Types::LIST, :name => 'availableVerificationMethods', :element => {:type => ::Thrift::Types::I32, :enum_class => ::VerificationMethod}}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @method.nil? || ::VerificationMethod::VALID_VALUES.include?(@method)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field method!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class WapInvitation
  include ::Thrift::Struct, ::Thrift::Struct_Union
  TYPE = 1
  INVITEEEMAIL = 10
  INVITERMID = 11
  ROOMMID = 12

  FIELDS = {
    TYPE => {:type => ::Thrift::Types::I32, :name => 'type', :enum_class => ::WapInvitationType},
    INVITEEEMAIL => {:type => ::Thrift::Types::STRING, :name => 'inviteeEmail'},
    INVITERMID => {:type => ::Thrift::Types::STRING, :name => 'inviterMid'},
    ROOMMID => {:type => ::Thrift::Types::STRING, :name => 'roomMid'}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @type.nil? || ::WapInvitationType::VALID_VALUES.include?(@type)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field type!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

